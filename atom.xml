<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Johnson</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-09-28T14:24:12.222Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Johnson</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>超级详细的TCP总结</title>
    <link href="http://yoursite.com/2019/09/28/TCP/"/>
    <id>http://yoursite.com/2019/09/28/TCP/</id>
    <published>2019-09-28T07:44:47.541Z</published>
    <updated>2019-09-28T14:24:12.222Z</updated>
    
    <content type="html"><![CDATA[<p>最近学习的时候浏览到一个网站感觉有点无敌，传送门<a href="http://c.biancheng.net/view/2351.html" target="_blank" rel="noopener">Door</a></p><h2 id="何为TCP"><a href="#何为TCP" class="headerlink" title="何为TCP"></a>何为TCP</h2><a id="more"></a><p>TCP（Transmission Control Protocol，传输控制协议）是一种面向连接的、可靠的、基于字节流的通信协议，数据在传输前要建立连接，传输完毕后还要断开连接。<br>客户端在收发数据前要使用 connect() 函数和服务器建立连接。建立连接的目的是保证IP地址、端口、物理链路等正确无误，为数据的传输开辟通道。</p><p>TCP建立连接时要传输三个数据包，俗称三次握手（Three-way Handshaking）。可以形象的比喻为下面的对话：<br>[Shake 1] 套接字A：“你好，套接字B，我这里有数据要传送给你，建立连接吧。”<br>[Shake 2] 套接字B：“好的，我这边已准备就绪。”<br>[Shake 3] 套接字A：“谢谢你受理我的请求。”</p><h2 id="TCP数据报结构"><a href="#TCP数据报结构" class="headerlink" title="TCP数据报结构"></a>TCP数据报结构</h2><img src="https://s2.ax1x.com/2019/09/28/ulBBkt.jpg" alt="ulBBkt.jpg" border="0"><p>带阴影的几个字段需要重点说明一下：<br>1) 序号：Seq（Sequence Number）序号占32位，用来标识从计算机A发送到计算机B的数据包的序号，计算机发送数据时对此进行标记。</p><p>2) 确认号：Ack（Acknowledge Number）确认号占32位，客户端和服务器端都可以发送，Ack = Seq + 1。</p><p>3) 标志位：每个标志位占用1Bit，共有6个，分别为 URG、ACK、PSH、RST、SYN、FIN，具体含义如下：<br>URG：紧急指针（urgent pointer）有效。<br>ACK：确认序号有效。<br>PSH：接收方应该尽快将这个报文交给应用层。<br>RST：重置连接。<br>SYN：建立一个新连接。<br>FIN：断开一个连接。<br>对英文字母缩写的总结：Seq 是 Sequence 的缩写，表示序列；Ack(ACK) 是 Acknowledge 的缩写，表示确认；SYN 是 Synchronous 的缩写，愿意是“同步的”，这里表示建立同步连接；FIN 是 Finish 的缩写，表示完成。</p><h2 id="连接的建立"><a href="#连接的建立" class="headerlink" title="连接的建立"></a>连接的建立</h2><p>使用 connect() 建立连接时，客户端和服务器端会相互发送三个数据包，请看下图：<br><img src="https://s2.ax1x.com/2019/09/28/ulBIhV.jpg" alt="ulBIhV.jpg" border="0"><br>客户端调用 socket() 函数创建套接字后，因为没有建立连接，所以套接字处于CLOSED状态；服务器端调用 listen() 函数后，套接字进入LISTEN状态，开始监听客户端请求。</p><p>这个时候，客户端开始发起请求：<br>1) 当客户端调用 connect() 函数后，TCP协议会组建一个数据包，并设置 SYN 标志位，表示该数据包是用来建立同步连接的。同时生成一个随机数字 1000，填充“序号（Seq）”字段，表示该数据包的序号。完成这些工作，开始向服务器端发送数据包，客户端就进入了SYN-SEND状态。</p><p>2) 服务器端收到数据包，检测到已经设置了 SYN 标志位，就知道这是客户端发来的建立连接的“请求包”。服务器端也会组建一个数据包，并设置 SYN 和 ACK 标志位，SYN 表示该数据包用来建立连接，ACK 用来确认收到了刚才客户端发送的数据包。</p><p>服务器生成一个随机数 2000，填充“序号（Seq）”字段。2000 和客户端数据包没有关系。</p><p>服务器将客户端数据包序号（1000）加1，得到1001，并用这个数字填充“确认号（Ack）”字段。</p><p>服务器将数据包发出，进入SYN-RECV状态。</p><p>3) 客户端收到数据包，检测到已经设置了 SYN 和 ACK 标志位，就知道这是服务器发来的“确认包”。客户端会检测“确认号（Ack）”字段，看它的值是否为 1000+1，如果是就说明连接建立成功。</p><p>接下来，客户端会继续组建数据包，并设置 ACK 标志位，表示客户端正确接收了服务器发来的“确认包”。同时，将刚才服务器发来的数据包序号（2000）加1，得到 2001，并用这个数字来填充“确认号（Ack）”字段。</p><p>客户端将数据包发出，进入ESTABLISED状态，表示连接已经成功建立。</p><p>4) 服务器端收到数据包，检测到已经设置了 ACK 标志位，就知道这是客户端发来的“确认包”。服务器会检测“确认号（Ack）”字段，看它的值是否为 2000+1，如果是就说明连接建立成功，服务器进入ESTABLISED状态。</p><p>至此，客户端和服务器都进入了ESTABLISED状态，连接建立成功，接下来就可以收发数据了<br>三次握手的关键是要确认对方收到了自己的数据包，这个目标就是通过“确认号（Ack）”字段实现的。计算机会记录下自己发送的数据包序号 Seq，待收到对方的数据包后，检测“确认号（Ack）”字段，看Ack = Seq + 1是否成立，如果成立说明对方正确收到了自己的数据包。</p><h2 id="TCP数据的数据传输过程"><a href="#TCP数据的数据传输过程" class="headerlink" title="TCP数据的数据传输过程"></a>TCP数据的数据传输过程</h2><p>建立连接后，两台主机就可以相互传输数据了。如下图所示：<br><a href="https://imgchr.com/i/ulDoVA" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/09/28/ulDoVA.jpg" alt="ulDoVA.jpg" border="0"></a></p><p>上图给出了主机A分2次（分2个数据包）向主机B传递200字节的过程。首先，主机A通过1个数据包发送100个字节的数据，数据包的 Seq 号设置为 1200。主机B为了确认这一点，向主机A发送 ACK 包，并将 Ack 号设置为 1301。<br>为了保证数据准确到达，目标机器在收到数据包（包括SYN包、FIN包、普通数据包等）包后必须立即回传ACK包，这样发送方才能确认数据传输成功。<br>此时 Ack 号为 1301 而不是 1201，原因在于 Ack 号的增量为传输的数据字节数。假设每次 Ack 号不加传输的字节数，这样虽然可以确认数据包的传输，但无法明确100字节全部正确传递还是丢失了一部分，比如只传递了80字节。因此按如下的公式确认 Ack 号：<br>Ack号 = Seq号 + 传递的字节数 + 1</p><p>与三次握手协议相同，最后加 1 是为了告诉对方要传递的 Seq 号。<br>下面分析传输过程中数据包丢失的情况，如下图所示：<br><img src="https://s2.ax1x.com/2019/09/28/ulrZqJ.jpg" alt="ulrZqJ.jpg" border="0"></p><p>上图表示通过 Seq 1301 数据包向主机B传递100字节的数据，但中间发生了错误，主机B未收到。经过一段时间后，主机A仍未收到对于 Seq 1301 的ACK确认，因此尝试重传数据。</p><p>为了完成数据包的重传，TCP套接字每次发送数据包时都会启动定时器，如果在一定时间内没有收到目标机器传回的 ACK 包，那么定时器超时，数据包会重传。<br>上图演示的是数据包丢失的情况，也会有 ACK 包丢失的情况，一样会重传。</p><p>重传超时时间（RTO, Retransmission Time Out）:<br>这个值太大了会导致不必要的等待，太小会导致不必要的重传，理论上最好是网络 RTT 时间，但又受制于网络距离与瞬态时延变化，所以实际上使用自适应的动态算法（例如 Jacobson 算法和 Karn 算法等）来确定超时时间。<br>往返时间（RTT，Round-Trip Time）表示从发送端发送数据开始，到发送端收到来自接收端的 ACK 确认包（接收端收到数据后便立即确认），总共经历的时延。<br>重传次数:<br>TCP数据包重传次数根据系统设置的不同而有所区别。有些系统，一个数据包只会被重传3次，如果重传3次后还未收到该数据包的 ACK 确认，就不再尝试重传。但有些要求很高的业务系统，会不断地重传丢失的数据包，以尽最大可能保证业务数据的正常交互。</p><h2 id="TCP的四次挥手断开连接"><a href="#TCP的四次挥手断开连接" class="headerlink" title="TCP的四次挥手断开连接"></a>TCP的四次挥手断开连接</h2><p>建立连接非常重要，它是数据正确传输的前提；断开连接同样重要，它让计算机释放不再使用的资源。如果连接不能正常断开，不仅会造成数据传输错误，还会导致套接字不能关闭，持续占用资源，如果并发量高，服务器压力堪忧。</p><p>建立连接需要三次握手，断开连接需要四次握手，可以形象的比喻为下面的对话：<br>[Shake 1] 套接字A：“任务处理完毕，我希望断开连接。”<br>[Shake 2] 套接字B：“哦，是吗？请稍等，我准备一下。”<br>等待片刻后……<br>[Shake 3] 套接字B：“我准备好了，可以断开连接了。”<br>[Shake 4] 套接字A：“好的，谢谢合作。”</p><p>下图演示了客户端主动断开连接的场景：<br><img src="https://s2.ax1x.com/2019/09/28/ulrssg.jpg" alt="ulrssg.jpg" border="0"></p><p>建立连接后，客户端和服务器都处于ESTABLISED状态。这时，客户端发起断开连接的请求：<br>1) 客户端调用 close() 函数后，向服务器发送 FIN 数据包，进入FIN_WAIT_1状态。FIN 是 Finish 的缩写，表示完成任务需要断开连接。</p><p>2) 服务器收到数据包后，检测到设置了 FIN 标志位，知道要断开连接，于是向客户端发送“确认包”，进入CLOSE_WAIT状态。</p><p>注意：服务器收到请求后并不是立即断开连接，而是先向客户端发送“确认包”，告诉它我知道了，我需要准备一下才能断开连接。</p><p>3) 客户端收到“确认包”后进入FIN_WAIT_2状态，等待服务器准备完毕后再次发送数据包。</p><p>4) 等待片刻后，服务器准备完毕，可以断开连接，于是再主动向客户端发送 FIN 包，告诉它我准备好了，断开连接吧。然后进入LAST_ACK状态。</p><p>5) 客户端收到服务器的 FIN 包后，再向服务器发送 ACK 包，告诉它你断开连接吧。然后进入TIME_WAIT状态。</p><p>6) 服务器收到客户端的 ACK 包后，就断开连接，关闭套接字，进入CLOSED状态。</p><h2 id="关于-TIME-WAIT-状态的说明"><a href="#关于-TIME-WAIT-状态的说明" class="headerlink" title="关于 TIME_WAIT 状态的说明"></a>关于 TIME_WAIT 状态的说明</h2><p>虽然按道理，四个报文都发送完毕，我们可以直接进入CLOSE状态了，但是我们必须假象网络是不可靠的，有可以最后一个ACK丢失。所以TIME_WAIT状态就是用来重发可能丢失的ACK报文。在Client发送出最后的ACK回复，但该ACK可能丢失。Server如果没有收到ACK，将不断重复发送FIN片段。所以Client不能立即关闭，它必须确认Server接收到了该ACK。Client会在发送出ACK之后进入到TIME_WAIT状态。Client会设置一个计时器，等待2MSL的时间。如果在该时间内再次收到FIN，那么Client会重发ACK并再次等待2MSL。所谓的2MSL是两倍的MSL(Maximum Segment Lifetime)。MSL指一个片段在网络中最大的存活时间，2MSL就是一个发送和一个回复所需的最大时间。如果直到2MSL，Client都没有再次收到FIN，那么Client推断ACK已经被成功接收，则结束TCP连接。</p><h2 id="为什么建立连接是三次握手，关闭连接是四次挥手"><a href="#为什么建立连接是三次握手，关闭连接是四次挥手" class="headerlink" title="为什么建立连接是三次握手，关闭连接是四次挥手"></a>为什么建立连接是三次握手，关闭连接是四次挥手</h2><p>因为当Server端收到Client端的SYN连接请求报文后，可以直接发送SYN+ACK报文。其中ACK报文是用来应答的，SYN报文是用来同步的。但是关闭连接时，当Server端收到FIN报文时，很可能并不会立即关闭SOCKET，所以只能先回复一个ACK报文，告诉Client端，”你发的FIN报文我收到了”。只有等到我Server端所有的报文都发送完了，我才能发送FIN报文，因此不能一起发送。故需要四步握手。</p><h2 id="为什么不能用两次握手"><a href="#为什么不能用两次握手" class="headerlink" title="为什么不能用两次握手"></a>为什么不能用两次握手</h2><p>3次握手完成两个重要的功能，既要双方做好发送数据的准备工作(双方都知道彼此已准备好)，也要允许双方就初始序列号进行协商，这个序列号在握手过程中被发送和确认。<br>现在把三次握手改成仅需要两次握手，死锁是可能发生的。作为例子，考虑计算机S和C之间的通信，假定C给S发送一个连接请求分组，S收到了这个分组，并发 送了确认应答分组。按照两次握手的协定，S认为连接已经成功地建立了，可以开始发送数据分组。可是，C在S的应答分组在传输中被丢失的情况下，将不知道S 是否已准备好，不知道S建立什么样的序列号，C甚至怀疑S是否收到自己的连接请求分组。在这种情况下，C认为连接还未建立成功，将忽略S发来的任何数据分 组，只等待连接确认应答分组。而S在发出的分组超时后，重复发送同样的分组。这样就形成了死锁。</p><h2 id="如果建立了连接，但是客户端突然出现了故障怎么办"><a href="#如果建立了连接，但是客户端突然出现了故障怎么办" class="headerlink" title="如果建立了连接，但是客户端突然出现了故障怎么办"></a>如果建立了连接，但是客户端突然出现了故障怎么办</h2><p>TCP还设有一个保活计时器，显然，客户端如果出现故障，服务器不能一直等下去，白白浪费资源。服务器每收到一次客户端的请求后都会重新复位这个计时器，时间通常是设置为2小时，若两小时还没有收到客户端的任何数据，服务器就会发送一个探测报文段，以后每隔75秒钟发送一次。若一连发送10个探测报文仍然没反应，服务器就认为客户端出了故障，接着就关闭连接。</p><h2 id="超时重传机制"><a href="#超时重传机制" class="headerlink" title="超时重传机制"></a>超时重传机制</h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近学习的时候浏览到一个网站感觉有点无敌，传送门&lt;a href=&quot;http://c.biancheng.net/view/2351.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Door&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;何为TCP&quot;&gt;&lt;a href=&quot;#何为TCP&quot; class=&quot;headerlink&quot; title=&quot;何为TCP&quot;&gt;&lt;/a&gt;何为TCP&lt;/h2&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>数据结构之六大排序</title>
    <link href="http://yoursite.com/2019/09/27/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E5%85%AD%E5%A4%A7%E6%8E%92%E5%BA%8F/"/>
    <id>http://yoursite.com/2019/09/27/数据结构之六大排序/</id>
    <published>2019-09-27T01:55:40.157Z</published>
    <updated>2019-09-27T14:23:07.146Z</updated>
    
    <content type="html"><![CDATA[<h1 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h1><a id="more"></a><h2 id="冒泡排序的基本思想"><a href="#冒泡排序的基本思想" class="headerlink" title="冒泡排序的基本思想"></a>冒泡排序的基本思想</h2><p>冒泡排序的基本思想:<br>假设我们从大到小的排序，相邻两个数字进行大小的比较然后互换位置，结果会是这一轮的比较结束后，最后一个数一定是最小的，然后继续新的一轮循环，倒数第二个数字是这一轮里面最小的，依次类推<br>排序过程如下：<br>以数组{49,38,65,97,76,13,27,49}为例<br><img src="https://s2.ax1x.com/2019/09/27/uuDvgH.png" alt="uuDvgH.png" border="0"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">void Bubblesort(int k[],int n)</span><br><span class="line">&#123;</span><br><span class="line">int i,j,temp;</span><br><span class="line">int count1=0,count2=0;//定义两个计数器来查看效率； </span><br><span class="line"></span><br><span class="line">for(i=0;i&lt;n-1;i++)//比较n-1轮，肯定够是n-1嘛排到倒数第二个的时候剩下的哪一个肯定是最大的或者最小嘛</span><br><span class="line">&#123;</span><br><span class="line">for(j=0;j&lt;n-i-1;j++)//每轮比较n-1-i次</span><br><span class="line">&#123;</span><br><span class="line">count1++ ;</span><br><span class="line">if(k[j]&gt;k[j+1])</span><br><span class="line">&#123;</span><br><span class="line">count2++; </span><br><span class="line">temp=k[j];</span><br><span class="line">k[j]=k[j+1];</span><br><span class="line">k[j+1]=temp;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">printf(&quot;总共进行了%d次比较，%d次移动\n&quot;,count1,count2);</span><br><span class="line"> &#125; </span><br><span class="line"> int main(void)&#123;</span><br><span class="line"> int i;</span><br><span class="line"> int a[10]=&#123;5,2,6,0,3,9,1,7,4,8&#125;;</span><br><span class="line"> Bubblesort(a,10);</span><br><span class="line"> printf(&quot;排序的结果是:&quot;);</span><br><span class="line"> for(i=0;i&lt;10;i++)&#123;</span><br><span class="line"> printf(&quot;%d &quot;,a[i]);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> return 0;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h2 id="时间复杂度分析"><a href="#时间复杂度分析" class="headerlink" title="时间复杂度分析"></a>时间复杂度分析</h2><p>分析一下它的时间复杂度。当最好的情况，也就是要排序的表本身就是有序的，那么我们比较次数，根据最后改进的代码，可以推断出就是n-1次的比较，没有数据交换，时间复杂度为O(n)。当最坏的情况，即待排序表是逆序的情况，此时需要比较sigma(i=2, n, i-1)=1+2+3+…+(n-1)=n(n-1)/2次，并作等数量级的记录移动。因此，总的时间复杂度为O(n2)。</p><h1 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h1><h2 id="选择排序的基本思想"><a href="#选择排序的基本思想" class="headerlink" title="选择排序的基本思想"></a>选择排序的基本思想</h2><p>选择排序算法就是通过n-i次关键字间的比较，从n-i+1个记录中选出关键字最小的记录，并和第i(1&lt;=i&lt;=n)个记录交换-&gt;简单来说，假如要从小到大排序，那么我第一个数和后面的所有数先比较，第一个数是min，比较着发现一个min小的数，那么他就是min，然后又继续比又发现比现在的min小，那么他就是现在的min了，然后比出这一趟最小的数字，比完之后再让这个数字和第一个数字交换位置(现在的min和i进行比较)，依次类推。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">void Selectsort(int k[],int n)</span><br><span class="line">&#123;</span><br><span class="line">int i,j,temp,min;</span><br><span class="line">int count1=0,count2=0;//定义两个计数器来查看效率； </span><br><span class="line"></span><br><span class="line">for(i=0;i&lt;n-1;i++)</span><br><span class="line">&#123;</span><br><span class="line">min=i;</span><br><span class="line">for(j=i+1;j&lt;n;j++)//j指向i的后面一个数值； </span><br><span class="line">&#123;</span><br><span class="line">count1++ ;</span><br><span class="line">if(k[j]&lt;k[min])</span><br><span class="line">&#123;</span><br><span class="line">min=j;//知道了这个数比min小但是先不交换位置 </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">if(min!=i)//在大循环外面进行交换； </span><br><span class="line">&#123;</span><br><span class="line">count2++; </span><br><span class="line">temp=k[min];</span><br><span class="line">k[min]=k[i];</span><br><span class="line">k[i]=temp;</span><br><span class="line"> &#125; </span><br><span class="line">&#125;</span><br><span class="line">printf(&quot;总共进行了%d次比较，%d次移动\n&quot;,count1,count2);</span><br><span class="line"> &#125; </span><br><span class="line"> int main(void)&#123;</span><br><span class="line"> int i;</span><br><span class="line"> int a[10]=&#123;5,2,6,0,3,9,1,7,4,8&#125;;</span><br><span class="line"> Selectsort(a,10);</span><br><span class="line"> printf(&quot;排序的结果是:&quot;);</span><br><span class="line"> for(i=0;i&lt;10;i++)&#123;</span><br><span class="line"> printf(&quot;%d &quot;,a[i]);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> return 0;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h2 id="时间复杂度分析-1"><a href="#时间复杂度分析-1" class="headerlink" title="时间复杂度分析"></a>时间复杂度分析</h2><p>从简单选择排序的过程来看，它最大的特点就是交换移动数据次数相当少，这样也就节约了相应的时间。分析它的时间复杂度发现，无论最好最差的情况，其比较次数都是一样的多，第i趟排序需要进行n-i次关键字的比较，此时需要比较sigma(i=1, n-1, n-i)=(n-1)+(n-2)+…+1=n(n-1)/2次。而对于交换次数而言，当最好的时候，交换为0次，最差的时候，也就初始降序时，交换次数为n-1次，基于最终的排序时间是比较与交换的次数总和，因此，总的时间复杂度依然为O(n2)。</p><p>应该说，尽管与冒泡排序同为O(n2)，但简单选择排序的性能上还是要略优于冒泡排序。</p><h1 id="直接插入排序"><a href="#直接插入排序" class="headerlink" title="直接插入排序"></a>直接插入排序</h1><h2 id="直接插入排序的基本思想"><a href="#直接插入排序的基本思想" class="headerlink" title="直接插入排序的基本思想"></a>直接插入排序的基本思想</h2><p>插入排序原理很简单，讲一组数据分成两组，我分别将其称为有序组与待插入组。每次从待插入组中取出一个元素，与有序组的元素进行比较，并找到合适的位置，将该元素插到有序组当中。就这样，每次插入一个元素，有序组增加，待插入组减少。直到待插入组元素个数为0。当然，插入过程中涉及到了元素的移动。<br>为了排序方便，我们一般将数据第一个元素视为有序组，其他均为待插入组。<br>上面是比较官方的讲解，我自己是这样理解的:例如升序，取第一个值放入有序组，然后把无序组的数组拿过来比较，如果比他小就放左边大就放右边，依次类推。</p><img src="https://s2.ax1x.com/2019/09/27/uKuSl4.png" alt="uKuSl4.png" border="0"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">//升序 </span><br><span class="line">void Insertsort(int k[],int n) &#123;</span><br><span class="line">int i,j,temp;</span><br><span class="line"></span><br><span class="line">for(i=1; i&lt;n; i++) //让J可以指向他的前一个元素 </span><br><span class="line">&#123;</span><br><span class="line">if(k[i]&lt;k[i-1])// 小的数字要跑到前面去； </span><br><span class="line">&#123; </span><br><span class="line">temp=k[i];    </span><br><span class="line">for(j=i-1;k[j]&gt;temp;j--)//这是在有序区的比较，是从右往左的比较，如果有序区的值大于要比较的数值 ，往后移动一位。 </span><br><span class="line">&#123;</span><br><span class="line">k[j+1]=k[j];//若不是合适位置，有序组元素向后移动 </span><br><span class="line">&#125; </span><br><span class="line"> k[j+1]=temp;//循环的大小比较结束，现在这个数就是比要比较的数小的那个数，将要比较的数放到这个数的后面一位，将元素插入。 </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">int main(void) &#123;</span><br><span class="line">int i;</span><br><span class="line">int a[10]= &#123;5,2,6,0,3,9,1,7,4,8&#125;;</span><br><span class="line">Insertsort(a,10);</span><br><span class="line">printf(&quot;排序的结果是:&quot;);</span><br><span class="line">for(i=0; i&lt;10; i++) &#123;</span><br><span class="line">printf(&quot;%d &quot;,a[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h1><p>网上看了一个教程感觉挺厉害的，这个是传送门<br><a href="https://www.cnblogs.com/0zcl/p/6737944.html" target="_blank" rel="noopener">Door</a><br>简单来说就是先把堆整理成大顶堆，然后把第一个数也就是最大的那个数和最后一个数互换位置，换了位置之后重新排列大顶堆，继续和倒数第二个数交换，然后最后得出来的序列就是升序序列了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">void swap(int k[],int i,int j)</span><br><span class="line">&#123;</span><br><span class="line">int temp;</span><br><span class="line">temp=k[i];</span><br><span class="line">k[i]=k[j];</span><br><span class="line">k[j]=temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void HeapAdjust(int k[],int s,int n) //s是双亲， 构建大顶堆的函数； </span><br><span class="line">&#123;</span><br><span class="line">int i,temp;</span><br><span class="line">temp=k[s]; </span><br><span class="line">for(i=2*s;i&lt;=n;i=i*2) //继续往下一层遍历；</span><br><span class="line">&#123;</span><br><span class="line">if(i&lt;n&amp;&amp;k[i]&lt;k[i+1])//i不是最后一个节点; </span><br><span class="line">&#123;</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line">if(temp&gt;=k[i])</span><br><span class="line">&#123;</span><br><span class="line">break; //双亲大于孩子的话； </span><br><span class="line">&#125;</span><br><span class="line">k[s]=k[i];</span><br><span class="line">s=i; </span><br><span class="line">&#125; </span><br><span class="line">k[s]=temp;</span><br><span class="line">&#125;</span><br><span class="line">void Heapsort(int k[],int n)</span><br><span class="line">&#123;</span><br><span class="line">int i;</span><br><span class="line">for(i=n/2;i&gt;0;i--)</span><br><span class="line">&#123;</span><br><span class="line">HeapAdjust(k,i,n);</span><br><span class="line">&#125;</span><br><span class="line">for(i=n;i&gt;1;i--)//第一个跟最后一个互换； </span><br><span class="line">&#123;</span><br><span class="line">swap(k,1,i);</span><br><span class="line">HeapAdjust(k,1,i-1);//换了之后又要重新构建乱了的堆； </span><br><span class="line">&#125;</span><br><span class="line"> &#125; </span><br><span class="line"></span><br><span class="line">int main(void) </span><br><span class="line">&#123;</span><br><span class="line">int i;</span><br><span class="line">int a[10]= &#123;-1,5,2,6,0,3,9,1,7,4&#125;;</span><br><span class="line">Heapsort(a,9);</span><br><span class="line">printf(&quot;排序的结果是:&quot;);</span><br><span class="line">for(i=1;i&lt;10;i++)</span><br><span class="line">&#123;</span><br><span class="line">printf(&quot;%d &quot;,a[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h1><h2 id="希尔排序的基本思想"><a href="#希尔排序的基本思想" class="headerlink" title="希尔排序的基本思想"></a>希尔排序的基本思想</h2><p>希尔排序就是插入排序的进阶版本<br>这是传送门<a href="https://blog.csdn.net/qq_39207948/article/details/80006224" target="_blank" rel="noopener">Door</a>;</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;冒泡排序&quot;&gt;&lt;a href=&quot;#冒泡排序&quot; class=&quot;headerlink&quot; title=&quot;冒泡排序&quot;&gt;&lt;/a&gt;冒泡排序&lt;/h1&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>数据结构之队列</title>
    <link href="http://yoursite.com/2019/09/24/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E9%98%9F%E5%88%97/"/>
    <id>http://yoursite.com/2019/09/24/数据结构之队列/</id>
    <published>2019-09-24T09:29:20.267Z</published>
    <updated>2019-09-24T10:14:07.045Z</updated>
    
    <content type="html"><![CDATA[<h2 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h2><p>队列（queue）是只允许在一端进行插入操作，而在另一端进行删除操作的线性表。<a id="more"></a><br>队列是一种先进先出（First In First Out）的线性表，简称FIFO。允许插入的一端称为队尾，允许删除的一端称为队头。</p><h2 id="顺序存储的改进–循环队列"><a href="#顺序存储的改进–循环队列" class="headerlink" title="顺序存储的改进–循环队列"></a>顺序存储的改进–循环队列</h2><p>引入两个指针，front指针指向队头元素，rear指针指向队尾元素的下一个位置，这样当front等于rear时，此队列不是还剩一个元素，而是空队列。</p><img src="https://s2.ax1x.com/2019/09/24/uAaj6e.png" alt="uAaj6e.png" border="0"><p>空队列时，front等于rear，现在当队列满时，也是front等于rear，那么如何判断此时的队列究竟是空还是满呢？<br><img src="https://s2.ax1x.com/2019/09/24/uAdgHA.png" alt="uAdgHA.png" border="0"></p><p>条件就是front=rear，当队列满时，我们修改其条件，保留一个元素空间。也就是说，队列满时，数组中还有一个空闲单元。如下图所示，我们就认为此队列已经满了，也就是说，我们不允许上图情况出现。</p><img src="https://s2.ax1x.com/2019/09/24/uAdzgU.png" alt="uAdzgU.png" border="0"><p>若队列的最大尺寸为QueueSize，那么队列满的条件是(rear+1)%QueueSize==front（取模“%”的目的就是为了整合rear与front大小为一个问题）。比如上面这个例子，QueueSize=5，图中front=0，而rear=4，(4+1)%5=0，所以此时队列满。再比如图中的右图，front=2而rear=1。(1+1)%5=2，所以此时队列也是满的。而对于图4-12-6，front=2而rear=0，(0+1)%5=1，1≠2，所以此时队列并没有满。</p><p>通用的计算队列长度公式为：(rear-front+QueueSize)%QueueSize。</p><h3 id="入队"><a href="#入队" class="headerlink" title="入队"></a>入队</h3> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> /* 若队列未满，则插入元素e为Q新的队尾元素 */</span><br><span class="line">Status EnQueue(SqQueue *Q, QElemType e)</span><br><span class="line">&#123;</span><br><span class="line">    /* 队列满的判断 */</span><br><span class="line">    if ((Q-&gt;rear + 1) % MAXSIZE == Q-&gt;front)    </span><br><span class="line">        return ERROR;</span><br><span class="line">    /* 将元素e赋值给队尾 */</span><br><span class="line">    Q-&gt;data[Q-&gt;rear] = e;                       </span><br><span class="line">    /* rear指针向后移一位置， */</span><br><span class="line">    Q-&gt;rear = (Q-&gt;rear + 1) % MAXSIZE;          </span><br><span class="line">    /* 若到最后则转到数组头部 */</span><br><span class="line">    return OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="出队"><a href="#出队" class="headerlink" title="出队"></a>出队</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">/* 若队列不空，则删除Q中队头元素，用e返回其值 */</span><br><span class="line">Status DeQueue(SqQueue *Q, QElemType *e)</span><br><span class="line">&#123;</span><br><span class="line">    /* 队列空的判断 */</span><br><span class="line">    if (Q-&gt;front == Q-&gt;rear)                </span><br><span class="line">        return ERROR;</span><br><span class="line">    /* 将队头元素赋值给e */</span><br><span class="line">    *e = Q-&gt;data[Q-&gt;front];                 </span><br><span class="line">    /* front指针向后移一位置， */</span><br><span class="line">    Q-&gt;front = (Q-&gt;front + 1) % MAXSIZE;    </span><br><span class="line">    /* 若到最后则转到数组头部 */</span><br><span class="line">    return  OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="队列的链式存储结构"><a href="#队列的链式存储结构" class="headerlink" title="队列的链式存储结构"></a>队列的链式存储结构</h2><p>队列的链式存储结构，其实就是线性表的单链表，只不过它只能尾进头出而已，我们把它简称为链队列。为了操作上的方便，我们将队头指针指向链队列的头结点，而队尾指针指向终端结点<br>空队列时，front和rear都指向头结点<br><img src="https://s2.ax1x.com/2019/09/24/uABgHJ.png" alt="uABgHJ.png" border="0"></p><h3 id="入队-1"><a href="#入队-1" class="headerlink" title="入队"></a>入队</h3><img src="https://s2.ax1x.com/2019/09/24/uADUKO.png" alt="uADUKO.png" border="0">入队操作时，其实就是在链表尾部插入结点<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">/* 插入元素e为Q的新的队尾元素 */</span><br><span class="line">Status EnQueue(LinkQueue *Q, QElemType e)</span><br><span class="line">&#123;</span><br><span class="line">    QueuePtr s = </span><br><span class="line">(QueuePtr)malloc(sizeof(QNode));</span><br><span class="line">    /* 存储分配失败 */</span><br><span class="line">    if (!s)               </span><br><span class="line">        exit(OVERFLOW);</span><br><span class="line">    s-&gt;data = e;</span><br><span class="line">    s-&gt;next = NULL;</span><br><span class="line">    /* 把拥有元素e新结点s赋值给原队尾结点的后继， */</span><br><span class="line">    Q-&gt;rear-&gt;next = s;    </span><br><span class="line">    /* 见上图中① */</span><br><span class="line">    /* 把当前的s设置为队尾结点，rear指向s，见上图中② */</span><br><span class="line">    Q-&gt;rear = s;          </span><br><span class="line">    return OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="出队-1"><a href="#出队-1" class="headerlink" title="出队"></a>出队</h3><img src="https://s2.ax1x.com/2019/09/24/uADBad.png" alt="uADBad.png" border="0"><p>出队操作时，就是头结点的后继结点出队，将头结点的后继改为它后面的结点，若链表除头结点外只剩一个元素时，则需将rear指向头结点.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">/* 若队列不空，删除Q的队头元素，用e返回其值，</span><br><span class="line">并返回OK，否则返回ERROR */</span><br><span class="line">Status DeQueue(LinkQueue *Q, QElemType *e)</span><br><span class="line">&#123;</span><br><span class="line">    QueuePtr p;</span><br><span class="line">if (Q-&gt;front == Q-&gt;rear)</span><br><span class="line">        return ERROR;</span><br><span class="line">    /* 将欲删除的队头结点暂存给p，见上图中① */</span><br><span class="line">    p = Q-&gt;front-&gt;next;          </span><br><span class="line">    /* 将欲删除的队头结点的值赋值给e */</span><br><span class="line">    *e = p-&gt;data;                </span><br><span class="line">    /* 将原队头结点后继p-&gt;next赋值给头结点后继， */</span><br><span class="line">    Q-&gt;front-&gt;next = p-&gt;next;    </span><br><span class="line">    /* 见上图中② */</span><br><span class="line">    /* 若队头是队尾，则删除后将rear指向头结点，见上图中③ */</span><br><span class="line">    if (Q-&gt;rear == p)            </span><br><span class="line">        Q-&gt;rear = Q-&gt;front;</span><br><span class="line">    free(p);</span><br><span class="line">    return OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;队列&quot;&gt;&lt;a href=&quot;#队列&quot; class=&quot;headerlink&quot; title=&quot;队列&quot;&gt;&lt;/a&gt;队列&lt;/h2&gt;&lt;p&gt;队列（queue）是只允许在一端进行插入操作，而在另一端进行删除操作的线性表。
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>数据结构之栈</title>
    <link href="http://yoursite.com/2019/09/24/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E6%A0%88/"/>
    <id>http://yoursite.com/2019/09/24/数据结构之栈/</id>
    <published>2019-09-24T08:39:51.080Z</published>
    <updated>2019-09-24T09:43:10.803Z</updated>
    
    <content type="html"><![CDATA[<h1 id="栈的优缺点"><a href="#栈的优缺点" class="headerlink" title="栈的优缺点"></a>栈的优缺点</h1><p>栈是线性表的特例</p><a id="more"></a><p>什么是栈，它是你的电脑内存的一个特别区域，它用来存储被每一个function（包括mian（）方法）创建的临时变量。栈是FILO，就是先进后出原则的结构体，它密切的被CPU管理和充分利用。每次function声明一个新的变量，它就会被“推”到栈中。然后每次一个function退出时，所有关于这个函数中定义的变量都会被释放（换句话说就是删除）。一旦栈中的变量释放，这块区域就会变成可用的，提供给其他栈中的变量。</p><p>用栈存储变量的好处是，内存是被你管理的。你不用手动的创建内存，不用当你不在需要它的时候手动释放内存。另外，由于CPU组织栈内存很高效。读出和写入栈变量是很快的。</p><p>理解栈的关键是理解概念，当一个function退出时，所有它的变量都会从栈中弹出,以后都会永远消失。因此栈中的变量本质是局部的。这和我们原来理解为变量作用域或者本地或者全局变量是相关的。在C中，一个公共的bug 是从你程序中的一个function外尝试访问一个在栈中的这个function的变量（在该function已经退出后）。</p><p>关于栈的另一个特点我们应该记住，就是存储再栈中的变量的大小有限制。而堆上创建变量不用考虑。</p><p>总结栈：</p><p>a、栈的生长和伸缩就是函数压入或者推出局部变量。</p><p>b、我们不用自己去管理内存，变量创建和释放都是自动的。</p><p>c、栈中的变量只有在函数创建运行时存在。</p><h2 id="栈的顺序存储结构"><a href="#栈的顺序存储结构" class="headerlink" title="栈的顺序存储结构"></a>栈的顺序存储结构</h2><p>我们定义一个top变量来指示栈顶元素在数组中的位置，这top就如同中学物理学过的游标卡尺的游标，如图4-4-1，它可以来回移动，意味着栈顶的top可以变大变小，但无论如何游标不能超出尺的长度。同理，若存储栈的长度为StackSize，则栈顶位置top必须小于StackSize。当栈存在一个元素时，top等于0，因此通常把空栈的判定条件定为top等于-1。<br><img src="https://s2.ax1x.com/2019/09/24/uAlD4H.png" alt="uAlD4H.png" border="0"></p><h3 id="Push"><a href="#Push" class="headerlink" title="Push"></a>Push</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">/* 插入元素e为新的栈顶元素 */</span><br><span class="line">Status Push(SqStack *S, SElemType e)</span><br><span class="line">&#123;</span><br><span class="line">    /* 栈满 */</span><br><span class="line">    if (S-&gt;top == MAXSIZE - 1)    </span><br><span class="line">    &#123;</span><br><span class="line">        return ERROR;</span><br><span class="line">    &#125;</span><br><span class="line">    /* 栈顶指针增加一 */</span><br><span class="line">    S-&gt;top++;                     </span><br><span class="line">    /* 将新插入元素赋值给栈顶空间 */</span><br><span class="line">    S-&gt;data[S-&gt;top] = e;          </span><br><span class="line">    return OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>时间复杂度是O(1)。</p><h3 id="Pop"><a href="#Pop" class="headerlink" title="Pop"></a>Pop</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">/* 若栈不空，则删除S的栈顶元素，用e返回其值，</span><br><span class="line">   并返回OK；否则返回ERROR */</span><br><span class="line">Status Pop(SqStack *S, SElemType *e)</span><br><span class="line">&#123;</span><br><span class="line">    if (S-&gt;top == -1)</span><br><span class="line">        return ERROR;</span><br><span class="line">    /* 将要删除的栈顶元素赋值给e */</span><br><span class="line">    *e = S-&gt;data[S-&gt;top];    </span><br><span class="line">    /* 栈顶指针减一 */</span><br><span class="line">    S-&gt;top--;                </span><br><span class="line">    return OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>时间复杂度是O(1)。</p><h2 id="两栈共享空间"><a href="#两栈共享空间" class="headerlink" title="两栈共享空间"></a>两栈共享空间</h2><img src="https://s2.ax1x.com/2019/09/24/uA1OSA.png" alt="uA1OSA.png" border="0"><p>数组有两个端点，两个栈有两个栈底，让一个栈的栈底为数组的始端，即下标为0处，另一个栈为数组的末端，即下标为数组长度n-1处。这样，两个栈如果增加元素，就是两端点向中间延伸。<br>关键思路是：它们是在数组的两端，向中间靠拢。top1和top2是栈1和栈2的栈顶指针，可以想象，只要它们俩不见面，两个栈就可以一直使用。</p><p>从这里也就可以分析出来，栈1为空时，就是top1等于-1时；而当top2等于n时，即是栈2为空时，那什么时候栈满呢？<br>想想极端的情况，若栈2是空栈，栈1的top1等于n-1时，就是栈1满了。反之，当栈1为空栈时，top2等于0时，为栈2满。但更多的情况，其实就是我刚才说的，两个栈见面之时，也就是两个指针之间相差1时，即top1+1==top2为栈满。</p><h2 id="栈的链式存储结构"><a href="#栈的链式存储结构" class="headerlink" title="栈的链式存储结构"></a>栈的链式存储结构</h2><p>栈只是栈顶来做插入和删除操作，栈顶放在链表的头部还是尾部呢？由于单链表有头指针，而栈顶指针也是必须的，那干吗不让它俩合二为一呢，所以比较好的办法是把栈顶放在单链表的头部（如图4-6-1所示）。另外，都已经有了栈顶在头部了，单链表中比较常用的头结点也就失去了意义，通常对于链栈来说，是不需要头结点的。<br><img src="https://s2.ax1x.com/2019/09/24/uA8BUU.png" alt="uA8BUU.png" border="0"></p><p>对于空栈来说，链表原定义是头指针指向空，那么链栈的空其实就是top=NULL的时候。</p><h3 id="Push-1"><a href="#Push-1" class="headerlink" title="Push"></a>Push</h3><img src="https://s2.ax1x.com/2019/09/24/uA855D.png" alt="uA855D.png" border="0">对于链栈的进栈push操作，假设元素值为e的新结点是s，top为栈顶指针。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">/* 插入元素e为新的栈顶元素 */</span><br><span class="line">Status Push(LinkStack *S, SElemType e)</span><br><span class="line">&#123;</span><br><span class="line">    LinkStackPtr s </span><br><span class="line">      = (LinkStackPtr)malloc(sizeof(StackNode));</span><br><span class="line">    s-&gt;data = e;</span><br><span class="line">    /* 把当前的栈顶元素赋值给新结点的直接后继，如图中① */</span><br><span class="line">    s-&gt;next = S-&gt;top;    </span><br><span class="line">    /* 将新的结点s赋值给栈顶指针，如图中② */</span><br><span class="line">    S-&gt;top = s;          </span><br><span class="line">    S-&gt;count++;</span><br><span class="line">    return OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Pop-1"><a href="#Pop-1" class="headerlink" title="Pop"></a>Pop</h3><img src="https://s2.ax1x.com/2019/09/24/uAJnTf.png" alt="uAJnTf.png" border="0"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">/* 若栈不空，则删除S的栈顶元素，用e返回其值，</span><br><span class="line">   并返回OK；否则返回ERROR */</span><br><span class="line">Status Pop(LinkStack *S, SElemType *e)</span><br><span class="line">&#123;</span><br><span class="line">    LinkStackPtr p;</span><br><span class="line">    if (StackEmpty(*S))</span><br><span class="line">        return ERROR;</span><br><span class="line">    *e = S-&gt;top-&gt;data;</span><br><span class="line">    /* 将栈顶结点赋值给p，如图③ */</span><br><span class="line">    p = S-&gt;top;               </span><br><span class="line">    /* 使得栈顶指针下移一位，指向后一结点，如图④ */</span><br><span class="line">    S-&gt;top = S-&gt;top-&gt;next;    </span><br><span class="line">    /* 释放结点p */</span><br><span class="line">    free(p);                  </span><br><span class="line">    S-&gt;count--;</span><br><span class="line">    return OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="栈的四则运算"><a href="#栈的四则运算" class="headerlink" title="栈的四则运算"></a>栈的四则运算</h2><h3 id="中缀转后缀"><a href="#中缀转后缀" class="headerlink" title="中缀转后缀"></a>中缀转后缀</h3><p>规则总结:1.遇到操作数(数字,字母)直接输出<br>         2.遇到运算符入栈,POP的情况如下:一.进栈前发现前面的优先级有比自己高或者相同的全部POP,自己入栈,前面所有的全部弹出栈留下自己一个. 二.遇到左括号,遇到优先级比自己高或者相同的POP到左括号，直到遇到右括号括号里面的全部POP出栈。<br>         3. 可以参考a + b * c + (d * e + f)<em>g<br>1）首先读到a，直接输出。<br>2）读到“+”，将其放入到栈中。<br>3）读到b，直接输出。<br>此时栈和输出的情况如下：<br>4）读到“<em>”，因为栈顶元素”+”优先级比” * “ 低，所以将” * “直接压入栈中。<br>5）读到c，直接输出。<br>6）读到” + “，因为栈顶元素” * “的优先级比它高，所以弹出” * “并输出， 同理，栈中下一个元素” + “优先级与读到的操作符” + “一样，所以也要弹出并输出。然后再将读到的” + “压入栈中。<br>7）下一个读到的为”(“，它优先级最高，所以直接放入到栈中。<br>8）读到d，将其直接输出。<br>9）读到” * “，由于只有遇到” ) “的时候左括号”(“才会弹出，所以” * “直接压入栈中。<br>10）读到e，直接输出。<br>11）读到” + “，弹出” * “并输出，然后将”+”压入栈中。<br>12）读到f，直接输出。<br>13）接下来读到“）”，则直接将栈中元素弹出并输出直到遇到”(“为止。这里右括号前只有一个操作符”+”被弹出并输出。<br>14）读到” * “，压入栈中。读到g，直接输出。<br>15）此时输入数据已经读到末尾，栈中还有两个操作符“</em>”和” + “，直接弹出并输出。<br>另外一种方法：<br>1)先按照运算符的优先级对中缀表达式加括号，变成( ( a+(b<em>c) )+( ((d</em>e)+f) *g ) )<br>2)将运算符移到括号的后面，变成((a(bc)</em>)+(((de)<em>f)+g)</em>)+<br>3)去掉括号，得到abc<em>+de*f+g</em>+</p><h2 id="习题"><a href="#习题" class="headerlink" title="习题"></a>习题</h2><p>1.若一序列进栈顺序为e1,e2,e3,e4,e5,问存在多少种可能的出栈序列（42）<br>解：用卡特兰公式：<br>C（n/2n）/（n+1） 那个C是排列组合实在是不好打出来只能这样表示了。。。<br>2.下列代码的运行结果是（） string</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">void main()</span><br><span class="line">&#123;</span><br><span class="line">    Stack S;</span><br><span class="line">    Char x,y;</span><br><span class="line">    InitStack(S);</span><br><span class="line">    x=&apos;n&apos;;y=&apos;g&apos;;</span><br><span class="line">    Push(S,x);Push(S,&apos;i&apos;);Push(S,y);</span><br><span class="line">    Pop(S,x);Push(S,&apos;r&apos;);Push(S,&apos;t&apos;);Push(S,x);</span><br><span class="line">    Pop(S,x);Push(S,&apos; s&apos;);</span><br><span class="line">    while(!StackEmpty(S))&#123;Pop(S,y);printf(y);&#125;;</span><br><span class="line">        printf(x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解：考察的是栈：<br>(1)Push(S,x);Push(S,’i’);Push(S,y);执行结果：nig。<br>(2)Pop(S,x);Push(S,’r’);Push(S,’t’);Push(S,x);执行结果：ni（g）rtg 因为后进先出原则，x变量存储最近入栈的值g。<br>(3)Pop(S,x);Push(S,’ s’);执行结果ni(g)rt(g)s 同理括号里的的内容弹出，写在这里方便理解。<br>(4) while(!StackEmpty(S)){Pop(S,y);printf(y);}执行结果strin，就是讲栈s尾的内容赋值给变量y，并打印，根据后进先出原则，将上面的结果倒序。<br>(5)在第(2)中，x的变量为g，所以不难猜出，最后打印g。<br>(6)结果就是：string</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;栈的优缺点&quot;&gt;&lt;a href=&quot;#栈的优缺点&quot; class=&quot;headerlink&quot; title=&quot;栈的优缺点&quot;&gt;&lt;/a&gt;栈的优缺点&lt;/h1&gt;&lt;p&gt;栈是线性表的特例&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>网络基础之物理层</title>
    <link href="http://yoursite.com/2019/09/18/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80%E4%B9%8B%E7%89%A9%E7%90%86%E5%B1%82/"/>
    <id>http://yoursite.com/2019/09/18/网络基础之物理层/</id>
    <published>2019-09-18T13:22:28.922Z</published>
    <updated>2019-09-18T13:38:25.476Z</updated>
    
    <content type="html"><![CDATA[<h2 id="物理层"><a href="#物理层" class="headerlink" title="物理层"></a>物理层</h2><a id="more"></a><img src="https://s2.ax1x.com/2019/09/18/nH2hGt.png" alt="nH2hGt.png" border="0"><h3 id="信道的调制：调制分为两大类："><a href="#信道的调制：调制分为两大类：" class="headerlink" title="信道的调制：调制分为两大类："></a>信道的调制：调制分为两大类：</h3><p>基带调制：仅对基带信号的波形进行变换，使它能够与信道特性相适应。变换后的信号仍然是基带信号。把这种过程称为编码 (coding)。<br>带通调制：使用载波 (carrier)进行调制，把基带信号的频率范围搬移到较高的频段，并转换为模拟信号，这样就能够更好地在模拟信道中传输（即仅在一段频率范围内能够通过信道） 。</p><h3 id="传输媒体"><a href="#传输媒体" class="headerlink" title="传输媒体"></a>传输媒体</h3><p>    在导引型传输媒体中，电磁波被导引沿着固体媒体（铜线或光纤）传播。<br>    非导引型传输媒体就是指自由空间。在非导引型传输媒体中，电磁波的传输常称为无线传输。<br>双绞线<br>最常用的传输媒体。<br>模拟传输和数字传输都可以使用双绞线，其通信距离一般为几到十几公里。<br>屏蔽双绞线 STP (Shielded Twisted Pair)<br>无屏蔽双绞线 UTP (Unshielded Twisted Pair)  对传送数据来说，现在最常用的 UTP 是5类线（Category 5 或 CAT5）。<br>    同轴电缆<br>•    同轴电缆具有很好的抗干扰特性，被广泛用于传输较高速率的数据。<br>•    同轴电缆的带宽取决于电缆的质量。<br>•    50 Ω 同轴电缆 —— LAN / 数字传输常用<br>•    75 Ω 同轴电缆 —— 有线电视 / 模拟传输常用<br>光纤：<br>    多模光纤<br>可以存在多条不同角度入射的光线在一条光纤中传输。这种光纤就称为多模光纤。<br>    单模光纤<br>若光纤的直径减小到只有一个光的波长，则光纤就像一根波导那样，它可使光线一直向前传播，而不会产生多次反射。这样的光纤称为单模光纤。<br>优点：</p><ol><li>通信容量非常大。</li><li>传输损耗小，中继距离长。</li><li>抗雷电和电磁干扰性能好。</li><li>无串音干扰，保密性好。</li><li>体积小，重量轻。<h3 id="信道复用技术"><a href="#信道复用技术" class="headerlink" title="信道复用技术"></a>信道复用技术</h3></li></ol><img src="https://s2.ax1x.com/2019/09/18/nH25xf.png" alt="nH25xf.png" border="0"><h3 id="频分复用-FDM"><a href="#频分复用-FDM" class="headerlink" title="频分复用 FDM"></a>频分复用 FDM</h3><p>    频分复用的所有用户在同样的时间占用不同的带宽资源（请注意，这里的“带宽”是频率带宽而不是数据的发送速率）。 </p><h3 id="时分复用TDM"><a href="#时分复用TDM" class="headerlink" title="时分复用TDM"></a>时分复用TDM</h3><pre><code>时分复用则是将时间划分为一段段等长的时分复用帧（TDM帧）。每一个时分复用的用户在每一个 TDM 帧中占用固定序号的时隙。</code></pre><p>    每一个用户所占用的时隙是周期性地出现（其周期就是TDM帧的长度）的。<br>    TDM 信号也称为等时 (isochronous) 信号。</p><p>时分复用的所有用户在不同的时间占用同样的频带宽度</p><h3 id="统计时分复用STDM"><a href="#统计时分复用STDM" class="headerlink" title="统计时分复用STDM"></a>统计时分复用STDM</h3><img src="https://s2.ax1x.com/2019/09/18/nHR8JI.png" alt="nHR8JI.png" border="0"><h3 id="波分复用WDM"><a href="#波分复用WDM" class="headerlink" title="波分复用WDM"></a>波分复用WDM</h3><img src="https://s2.ax1x.com/2019/09/18/nHRrYn.png" alt="nHRrYn.png" border="0"><h3 id="码分复用CDMA"><a href="#码分复用CDMA" class="headerlink" title="码分复用CDMA"></a>码分复用CDMA</h3><p>    常用的名词是码分多址 CDMA (Code Division Multiple Access)。<br>    各用户使用经过特殊挑选的不同码型，因此彼此不会造成干扰。<br>    这种系统发送的信号有很强的抗干扰能力，其频谱类似于白噪声，不易被敌人发现。 </p><h2 id="ADSL技术"><a href="#ADSL技术" class="headerlink" title="ADSL技术"></a>ADSL技术</h2><pre><code>非对称数字用户线 ADSL (Asymmetric Digital Subscriber Line)技术就是用数字技术对现有的模拟电话用户线进行改造，使它能够承载宽带业务。</code></pre><p>    上行和下行带宽做成不对称的。<br>上行指从用户到 ISP，而下行指从 ISP 到用户<br>特点：<br>（1）高速传输<br>提供上、下行不对称的传输带宽；<br>（2）上网、打电话互不干扰<br>数据信号和电话音频信号以频分复用原理调制于各自频段互不干扰，上网的同时可以拨打或接听电话，避免了拨号上网时不能使用电话的烦恼；<br>（3）独享带宽，安全可靠<br>各结点采用宽带交换机处理交换信息，信息传递快速安全。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;物理层&quot;&gt;&lt;a href=&quot;#物理层&quot; class=&quot;headerlink&quot; title=&quot;物理层&quot;&gt;&lt;/a&gt;物理层&lt;/h2&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>网络基础的心得</title>
    <link href="http://yoursite.com/2019/09/18/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80%E7%9A%84%E5%BF%83%E5%BE%97/"/>
    <id>http://yoursite.com/2019/09/18/网络基础的心得/</id>
    <published>2019-09-18T13:20:38.765Z</published>
    <updated>2019-09-18T13:31:15.833Z</updated>
    
    <content type="html"><![CDATA[<h3 id="计算机与网络"><a href="#计算机与网络" class="headerlink" title="计算机与网络"></a>计算机与网络</h3><a id="more"></a><p>在假期的时候因为实习而好好的回顾了计网的知识，也比以前有了更深的理解</p><h2 id="计算机网络的概念"><a href="#计算机网络的概念" class="headerlink" title="计算机网络的概念"></a>计算机网络的概念</h2><p>计算机网络主要是由一些通用的、可编程的硬件互连而成的，而这些硬件并非专门用来实现某一特定目的（例如，传送数据或视频信号）。这些可编程的硬件能够用来传送多种不同类型的数据，并能支持广泛的和日益增长的应用。<br>互联网采用TCP/IP协议族作为通信规则</p><h2 id="互联网的组成"><a href="#互联网的组成" class="headerlink" title="互联网的组成"></a>互联网的组成</h2><p>从互联网的工作方式上看，可以划分为两大块：</p><h3 id="边缘部分：-由所有连接在互联网上的主机组成。这部分是用户直接使用的，用来进行通信（传送数据、音频或视频）和资源共享。"><a href="#边缘部分：-由所有连接在互联网上的主机组成。这部分是用户直接使用的，用来进行通信（传送数据、音频或视频）和资源共享。" class="headerlink" title="边缘部分： 由所有连接在互联网上的主机组成。这部分是用户直接使用的，用来进行通信（传送数据、音频或视频）和资源共享。"></a>边缘部分： 由所有连接在互联网上的主机组成。这部分是用户直接使用的，用来进行通信（传送数据、音频或视频）和资源共享。</h3><h3 id="核心部分：由大量网络和连接这些网络的路由器组成。这部分是为边缘部分提供服务的（提供连通性和交换）。：在网络核心部分起特殊作用的是路由器-router-。"><a href="#核心部分：由大量网络和连接这些网络的路由器组成。这部分是为边缘部分提供服务的（提供连通性和交换）。：在网络核心部分起特殊作用的是路由器-router-。" class="headerlink" title="核心部分：由大量网络和连接这些网络的路由器组成。这部分是为边缘部分提供服务的（提供连通性和交换）。：在网络核心部分起特殊作用的是路由器 (router)。"></a>核心部分：由大量网络和连接这些网络的路由器组成。这部分是为边缘部分提供服务的（提供连通性和交换）。：在网络核心部分起特殊作用的是路由器 (router)。</h3><p>路由器是实现分组交换 (packet switching) 的关键构件，其任务是转发收到的分组，这是网络核心部分最重要的功能，并且分组转发是网络核心部分最重要的功能。</p><h4 id="交换技术"><a href="#交换技术" class="headerlink" title="交换技术"></a>交换技术</h4><ol><li><p>电路交换：电路交换必定是面向连接的<br>电路交换分为三个阶段：<br>建立连接：建立一条专用的物理通路，以保证双方通话时所需的通信资源在通信时不会被其他用户占用；<br>通信：主叫和被叫双方就能互相通电话；<br>释放连接：释放刚才使用的这条专用的物理通路（释放刚才占用的所有通信资源）</p></li><li><p>分组交换<br>分组交换则采用存储转发技术。<br>在发送端，先把较长的报文划分成较短的、固定长度的数据段。 每一个数据段前面添加首部（每一个首部都含有地址。例如目的地址和源地址）构成分组，依次把各分组发送到接收端，接收端收到分组后剥去首部还原成报文，然后把收到的报文恢复成原来的报文<br>在路由器中的输入和输出端口之间没有直接连线。<br>路由器处理分组的过程是：<br>把收到的分组先放入缓存（暂时存储）；<br>查找转发表，找出到某个目的地址应从哪个端口转发；<br>把分组送到适当的端口转发出去。</p><img src="https://s2.ax1x.com/2019/09/18/nHgZkR.png" alt="nHgZkR.png" border="0"></li><li><p>报文交换 Message switching<br>存储接受到的报文，判断其目标地址以选择路由，最后，在下一跳路由空闲时，将数据转发给下一跳路由。报文交换系统现今都由分组交换或电路交换网络所承载。<br>电子邮件系统（E-mail）适合采用报文交换方式。<br>优点<br>①报文交换不需要为通信双方预先建立一条专用的通信线路，不存在连接建立时延，用户可随时发送报文。<br>②由于采用存储转发的传输方式，使之具有下列优点：a.在报文交换中便于设置代码检验和数据重发设施，加之交换结点还具有路径选择，就可以做到某条传输路径发生故障时，重新选择另一条路径传输数据，提高了传输的可靠性；b.在存储转发中容易实现代码转换和速率匹配，甚至收发双方可以不同时处于可用状态。这样就便于类型、规格和速度不同的计算机之间进行通信；c.提供多目标服务，即一个报文可以同时发送到多个目的地址，这在电路交换中是很难实现的；d.允许建立数据传输的优先级，使优先级高的报文优先转换。<br>③通信双方不是固定占有一条通信线路，而是在不同的时间一段一段地部分占有这条物理通路，因而大大提高了通信线路的利用率。<br>缺点<br>①由于数据进入交换结点后要经历存储、转发这一过程，从而引起转发时延（包括接收报文、检验正确性、排队、发送时间等），而且网络的通信量愈大，造成的时延就愈大，因此报文交换的实时性差，不适合传送实时或交互式业务的数据。<br>②报文交换只适用于数字信号。<br>③由于报文长度没有限制，而每个中间结点都要完整地接收传来的整个报文，当输出线路不空闲时，还可能要存储几个完整报文等待转发，要求网络中每个结点有较大的缓冲区。为了降低成本，减少结点的缓冲存储器的容量，有时要把等待转发的报文存在磁盘上，进一步增加了传送时延。</p><h2 id="端系统之间的两种通信方式"><a href="#端系统之间的两种通信方式" class="headerlink" title="端系统之间的两种通信方式"></a>端系统之间的两种通信方式</h2></li><li><p>客户服务器方式（C/S方式）即 Client/Server 方式，简称为 C/S 方式：<br>客户 (client) 和服务器 (server) 都是指通信中所涉及的两个应用进程。<br>客户是服务的请求方，服务器是服务的提供方<br>客户端必须知道服务器程序的地址，而服务器不需要。</p></li><li><p>对等方式（P2P方式）即 PeertoPeer 方式 ，简称为 P2P 方式：<br>只要两个主机都运行了对等连接软件，他们就可以进行平等的、对等连接通信。<br>每一个主机既是客户又是服务器   P2P技术打破了传统的Client/Server模式，在对等网络中，每个节点的地位都是相同的，具备客户端和服务器双重特性，可以同时作为服务使用者和服务提供者。模式实际上还是CS</p><h2 id="计算机网络的性能指标"><a href="#计算机网络的性能指标" class="headerlink" title="计算机网络的性能指标"></a>计算机网络的性能指标</h2><h3 id="速率"><a href="#速率" class="headerlink" title="速率"></a>速率</h3><p>比特（bit）是计算机中数据量的单位，也是信息论中使用的信息量的单位。<br>速率也叫做数据率，比特率。<br>速率往往是指额定速率或标称速率，非实际运行速率。  </p><h3 id="带宽"><a href="#带宽" class="headerlink" title="带宽"></a>带宽</h3><p>在计算机网络中，带宽用来表示网络中某通道传送数据的能力。表示在单位时间内网络中的某信道所能通过的“最高数据率”。单位是 bit/s，即 “比特每秒”。<br>一条通信链路的的带宽越宽，所能传输的最大数据率越高。</p><h3 id="吞吐量"><a href="#吞吐量" class="headerlink" title="吞吐量"></a>吞吐量</h3><p>吞吐量 (throughput) 表示在单位时间内通过某个网络（或信道、接口）的数据量。<br>吞吐量更经常地用于对现实世界中的网络的一种测量，以便知道实际上到底有多少数据量能够通过网络。<br>吞吐量受网络的带宽或网络的额定速率的限制。  </p><h3 id="时延"><a href="#时延" class="headerlink" title="时延"></a>时延</h3><p>时延 (delay 或 latency) 是指数据（一个报文或分组，甚至比特）从网络（或链路）的一端传送到另一端所需的时间。下面四个的总和就是总时延。<br>发送时延（传输时延）：数据帧长度bit/发送速率bit/s<br>传播时延：信道长度/信号在信道上的传播速率<br>处理时延：主机或路由器在收到分组时，为处理分组（例如分析首部、提取数据、差错检验或查找路由）所花费的时间。<br>排队时延：分组在路由器输入输出队列中排队等待处理所经历的时延。<br>排队时延的长短往往取决于网络中当时的通信量。<br>###时延带宽积<br>又称为以比特为单位的链路长度。<br>链路长度=传播时延*带宽（选择题经常计算）。</p><h3 id="RTT"><a href="#RTT" class="headerlink" title="RTT"></a>RTT</h3><p>往返时间 RTT (round-trip time) 表示从发送方发送数据开始，到发送方收到来自接收方的确认，总共经历的时间。</p><h3 id="利用率"><a href="#利用率" class="headerlink" title="利用率"></a>利用率</h3><p>信道利用率并非越高越好。当某信道的利用率增大时，该信道引起的时延也就迅速增加。</p><img src="https://s2.ax1x.com/2019/09/18/nHg87d.png" alt="nHg87d.png" border="0"></li></ol><h2 id="网络协议"><a href="#网络协议" class="headerlink" title="网络协议"></a>网络协议</h2><p>    语法：数据与控制信息的结构或格式 。<br>    语义：需要发出何种控制信息，完成何种动作以及做出何种响应。<br>    同步：事件实现顺序的详细说明。 </p><img src="https://s2.ax1x.com/2019/09/18/nHgr7j.png" alt="nHgr7j.png" border="0"><img src="https://s2.ax1x.com/2019/09/18/nHgfjU.png" alt="nHgfjU.png" border="0"><p>OSI各层的协议数据单元分别是什么？<br>物理层的PDU是数据位(Bit)，数据链路层的PDU是数据帧（Frame），网络层的PDU是数据包(Packet)，传输层的PDU是数据段(Segment)，其他更高层次的PDU是数据(Data)<br>拓展：<br>数据帧（Frame）：是一种信息单位，它的起始点和目的点都是数据链路层。<br>数据包（Packet）：也是一种信息单位，它的起始和目的地是网络层。<br>数据报（Datagram）：通常是指起始点和目的地都使用无连接网络服务的的网络层的信息单元。<br>段（Segment）：通常是指起始点和目的地都是传输层的信息单元。<br>消息（message）：是指起始点和目的地都在网络层以上（经常在应用层）的信息单元。</p><p>元素（cell）是一种固定长度的信息，它的起始点和目的地都是数据链路层。</p><p>元素通常用于异步传输模式（ATM）和交换多兆位数据服务（SMDS）网络等交换环境。</p><p>五层协议传送数据：数据<br>应用进程数据先传送到应用层，加上应用层首部，成为数据<br>应用层PDU再传送到运输层，加上运输层首部，成为数据段<br>运输层报文再传送到网络层，加上网络层首部，成为数据包（分组）（IP数据报）<br>IP数据报传送到链路层，加上链路层首部和尾部，成为数据帧<br>再传传送到物理层，物理层把比特流传送到物理媒体，再传送到另一台主机，然后依次一层一层剥掉。</p><img src="https://s2.ax1x.com/2019/09/18/nHgXjO.png" alt="nHgXjO.png" border="0">]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;计算机与网络&quot;&gt;&lt;a href=&quot;#计算机与网络&quot; class=&quot;headerlink&quot; title=&quot;计算机与网络&quot;&gt;&lt;/a&gt;计算机与网络&lt;/h3&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>简单的字符串整理</title>
    <link href="http://yoursite.com/2019/09/17/%E7%AE%80%E5%8D%95%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%95%B4%E7%90%86/"/>
    <id>http://yoursite.com/2019/09/17/简单的字符串整理/</id>
    <published>2019-09-17T12:27:05.823Z</published>
    <updated>2019-09-23T07:38:09.497Z</updated>
    
    <content type="html"><![CDATA[<h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><p>Scanf只能读取一个单词不能读取整个句子遇到遇到，只能读到第一个空格；<a id="more"></a><br>拓展一下scanf，scanf(“%8s”,&amp;A); printf(“%s”,A);这样只能读8位字符，并且中间有空格也只能读到空格前面的内容；<br>于是引出了gets（）：可以读取整行，直到遇到换行符号，然后丢弃换行符号；但是gets（）可能因为长度太长而溢出缓冲区。所以c99规定了fget（）函数。<br>相对应的printf（）和puts（）的区别：puts（）读取的时间比较快并且自动添加了换行符号，但是printf（）可以更方便读取多个字符串；</p><h2 id="Strlen（）"><a href="#Strlen（）" class="headerlink" title="Strlen（）"></a>Strlen（）</h2><p>统计字符串长度，不包括换行符；</p><h2 id="strnlen（）"><a href="#strnlen（）" class="headerlink" title="strnlen（）"></a>strnlen（）</h2><p>在strlen（）的基础上，如果strlen不遇到束符’\0’就不会停止扫描，所以使用了strnlen（）增加一个总长度来限制：<br>int main(void)<br>{<br>    char a[]={‘h’,’e’,’l’,’l’,’o’,’w’,’o’,’r’,’l’,’d’,’!’};<br>    printf(“%d\n”,strnlen(a,10));<br>    return 0;<br> }<br> 输出的结果是10；当然遇到’\0’时也会停止的。</p><h2 id="Strcat（）"><a href="#Strcat（）" class="headerlink" title="Strcat（）"></a>Strcat（）</h2><p>用于拼接两个字符串，合并成一个字符串作为第一个字符串，函数返回的是第一个字符串（这个字符串已经和字符串二拼接）</p><h2 id="Strncat（）"><a href="#Strncat（）" class="headerlink" title="Strncat（）"></a>Strncat（）</h2><p>因为strcat（）跟gets（）一样会溢出缓冲区所以延伸了该函数，如果太长的话字符串会追加到第一个字符串的尾部然后加上’\0’;</p><p>##Strcmp（）<br>比较两个字符串是否相同（不是比较字符单引号字符双引号字符串），相同的话为0，不同的话如果第一个的ASCII比较大返回1反之返回-1；可以利用这个返回值来排序字符串。</p><h2 id="Strncmp（）"><a href="#Strncmp（）" class="headerlink" title="Strncmp（）"></a>Strncmp（）</h2><p>可以比较两个字符串至第几个参数，例如只想要比较前五个字符，strncmp（”helloworld”,”hello”,5）;</p><h2 id="Strcpy（）和strncpy（）"><a href="#Strcpy（）和strncpy（）" class="headerlink" title="Strcpy（）和strncpy（）"></a>Strcpy（）和strncpy（）</h2><p>将字符串拷贝进一个临时数组，而strncpy（）就是担心缓冲区溢出；</p><h2 id="Sprintf（）"><a href="#Sprintf（）" class="headerlink" title="Sprintf（）"></a>Sprintf（）</h2><p>Printf（）是打印到显示器上，该函数是打印到字符串里面，可以把多个元素组合成一个字符串</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;字符串&quot;&gt;&lt;a href=&quot;#字符串&quot; class=&quot;headerlink&quot; title=&quot;字符串&quot;&gt;&lt;/a&gt;字符串&lt;/h2&gt;&lt;p&gt;Scanf只能读取一个单词不能读取整个句子遇到遇到，只能读到第一个空格；
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>结构体和指针的关系</title>
    <link href="http://yoursite.com/2019/09/17/%E7%BB%93%E6%9E%84%E4%BD%93%E5%92%8C%E6%8C%87%E9%92%88%E7%9A%84%E5%85%B3%E7%B3%BB/"/>
    <id>http://yoursite.com/2019/09/17/结构体和指针的关系/</id>
    <published>2019-09-17T12:22:37.003Z</published>
    <updated>2019-09-17T12:25:29.824Z</updated>
    
    <content type="html"><![CDATA[<p>简单地回忆下结构体：</p><h2 id="声明结构体类型："><a href="#声明结构体类型：" class="headerlink" title="声明结构体类型："></a>声明结构体类型：</h2><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">int main(void)</span><br><span class="line">&#123;</span><br><span class="line">struct teacher&#123; //声明一个结构体变量 struct tearcher相当于int char 定义变量的类型 </span><br><span class="line">int num;</span><br><span class="line">char name[10];</span><br><span class="line">char sex;</span><br><span class="line">int age;</span><br><span class="line">char department[20];</span><br><span class="line">float wage;</span><br><span class="line">&#125;;</span><br><span class="line">return 0;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h2 id="定义结构体变量"><a href="#定义结构体变量" class="headerlink" title="定义结构体变量"></a>定义结构体变量</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">int main(void)</span><br><span class="line">&#123;</span><br><span class="line">struct teacher&#123; //声明一个结构体变量 struct tearcher相当于int char 定义变量的类型 </span><br><span class="line">int num;</span><br><span class="line">char name[10];</span><br><span class="line">char sex;</span><br><span class="line">int age;</span><br><span class="line">char department[20];</span><br><span class="line">float wage;</span><br><span class="line">&#125;tearcher1，teacher2;//或者struct teacher teacher1,teacher2；</span><br><span class="line">return 0;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h2 id="结构体变量的引用："><a href="#结构体变量的引用：" class="headerlink" title="结构体变量的引用："></a>结构体变量的引用：</h2><p>结构体变量.成员名<br>Eg：teacher1.age=25；</p><h2 id="结构体数组"><a href="#结构体数组" class="headerlink" title="结构体数组"></a>结构体数组</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include&lt;string.h&gt;</span><br><span class="line">int main(void)</span><br><span class="line">&#123;</span><br><span class="line">struct teacher&#123; //声明一个结构体变量 struct tearcher相当于int char 定义变量的类型 </span><br><span class="line">int num;</span><br><span class="line">char name[10];</span><br><span class="line">char sex;</span><br><span class="line">int age;</span><br><span class="line">char department[20];</span><br><span class="line">float wage;</span><br><span class="line">&#125;tea[3];</span><br><span class="line"></span><br><span class="line">int i,j;</span><br><span class="line"></span><br><span class="line">for(i=0;i&lt;3;i++) &#123;   //使用双重循环来实现输入； </span><br><span class="line">  scanf(&quot;%d&quot;,&amp;tea[i]);</span><br><span class="line">  for(j=0;j&lt;10;j++)</span><br><span class="line">   scanf(&quot;%d&quot;,&amp;tea[i].name[j]); </span><br><span class="line">&#125; </span><br><span class="line">return 0;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h2 id="typedef简介"><a href="#typedef简介" class="headerlink" title="typedef简介"></a>typedef简介</h2><p>Typedof可以为某一类型自定义名称，#define是定义值的大小，typedof定义的就是类型的名称；<br>Eg：typedof unsigned char byte；<br>byte i，y[10]，*z；<br>在结构体里面的应用:<br>typedef struct student<br>{<br>　　 int num;<br>}STUDENT;//将struct student类型自定义名称STUDENT;</p><p>然后可以使用typedof定义的类型名；<br>STUDENT {10};<br>以上代码会被翻译：typedef struct student<br>{<br>　　 int num;<br>}STUDENT={10};</p><h2 id="结构体的嵌套"><a href="#结构体的嵌套" class="headerlink" title="结构体的嵌套"></a>结构体的嵌套</h2><p>在一个结构体内包含了另一个结构体作为其成员</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">struct STUDENT</span><br><span class="line">&#123;</span><br><span class="line">    long studentID;</span><br><span class="line">    char studentName[10];</span><br><span class="line">    char studentSex;</span><br><span class="line">    int score[4];</span><br><span class="line">    struct DATE</span><br><span class="line">    &#123;</span><br><span class="line">        int year;</span><br><span class="line">        int month;</span><br><span class="line">        int day;</span><br><span class="line">    &#125;birthday;</span><br><span class="line">&#125;student;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">student.birthday.day = 100;</span><br><span class="line">printf(&quot;%d&quot;, student.birthday.day);</span><br></pre></td></tr></table></figure><p>这是不使用typeof的<br>使用了typeof的:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">typedef struct date</span><br><span class="line">&#123;</span><br><span class="line">    int year;</span><br><span class="line">    int month;</span><br><span class="line">    int day;</span><br><span class="line">&#125;DATE;</span><br><span class="line"></span><br><span class="line">typedef struct student</span><br><span class="line">&#123;</span><br><span class="line">    long studentID;</span><br><span class="line">    char studentName[10];</span><br><span class="line">    char studentSex;</span><br><span class="line">    DATE birthday;  //对照typeof章节来进行。</span><br><span class="line">    int score[4];</span><br><span class="line">&#125;STUDENT;</span><br><span class="line">STUDENT pp;</span><br></pre></td></tr></table></figure><p>上面代码中，定义了结构体变量birthday和pp，并给struct date和struct student分别取别名为DATE和STUDENT，</p><p>当出现结构体嵌套时，必须以级联方式访问结构体成员，即通过成员选择运算符逐级找到最底层的成员时再引用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1 pp.birthday.day = 10;</span><br><span class="line">2 printf(&quot;%d&quot;, pp.birthday.day);</span><br></pre></td></tr></table></figure><h2 id="结构体与指针"><a href="#结构体与指针" class="headerlink" title="结构体与指针"></a>结构体与指针</h2><p>声明结构指针指针很简单:</p><h3 id="普通的定义方法"><a href="#普通的定义方法" class="headerlink" title="普通的定义方法"></a>普通的定义方法</h3><p>Struct guy *him;<br>假设现在bar是结构体类型的一个变量，那么想要让指针指向它可以<br>*him=&amp;bar 使用取地址符号是因为bar并不是一个数组名称；<br>那么现在我们定义一个结构数组fellow[ ];<br>Him=&amp;fellow[0]; </p><h3 id="使用typedof的定义"><a href="#使用typedof的定义" class="headerlink" title="使用typedof的定义"></a>使用typedof的定义</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">typedef struct student</span><br><span class="line">&#123;</span><br><span class="line">    long studentID;</span><br><span class="line">    char studentName[10];</span><br><span class="line">    char studentSex;</span><br><span class="line">    DATE birthday;</span><br><span class="line">    int score[4];</span><br><span class="line">&#125;STUDENT;</span><br><span class="line">STUDENT stu1;</span><br><span class="line">STUDENT *pt;</span><br><span class="line">pt = &amp;stu1;  // STUDENT *pt = &amp;stu1;</span><br></pre></td></tr></table></figure><p>假设一个已经声明了一个STUDENT结构体类型的包含30个元素的数组stu<br>STUDENT *pt = stu;// STUDENT *pt = &amp;stu[0]; //STUDENT *pt;pt = stu;</p><h2 id="用指针访问成员"><a href="#用指针访问成员" class="headerlink" title="用指针访问成员"></a>用指针访问成员</h2><p>Him==&amp;bar,那么him-&gt;income即是bar.income; bar.income==(*him).income</p><p>Him==&amp;fellow[0],那么him-&gt;income即是fewllow[0].income; fellow[0].income==(*him).income</p><h2 id="向函数传递结构的信息"><a href="#向函数传递结构的信息" class="headerlink" title="向函数传递结构的信息"></a>向函数传递结构的信息</h2><p>我们这里为了方便统一声明一个fouds结构<br>Struct funds<br>{<br>  Double bankund;<br>};<br>声明一个变量struct funds stan{略};</p><h3 id="传递结构的成员"><a href="#传递结构的成员" class="headerlink" title="传递结构的成员"></a>传递结构的成员</h3><p>定义一个函数double sum(double x,double y){ return(x+y);}<br>我们可以输出printf(“%f”,stan.bankfund);这样就传递了结构成员</p><h3 id="传递结构的地址"><a href="#传递结构的地址" class="headerlink" title="传递结构的地址"></a>传递结构的地址</h3><p>将结构的地址作为函数的参数，扯到地址那么就想到了指针:<br>Double sum（const struct fund *money）<br>{<br>  Return (money-&gt;bankfund+money-&gt;savefund);<br>}</p><p>Printf(“%f”,sum(&amp;stan));//因为结构体的变量名和数组不一样不是地址的别名所以需要加上取地址符号，而且函数定义的也是一个纸箱funds的指针。</p><h3 id="传递结构"><a href="#传递结构" class="headerlink" title="传递结构"></a>传递结构</h3><p>将结构作为函数的参数<br>Double sum（struct funds moolah）<br>{ return (moolah.bankfund+moolah.savefund); }<br>Printf(“%f”,sum(stan));</p><h2 id="联合"><a href="#联合" class="headerlink" title="联合"></a>联合</h2><p>Eg.声明一个联合<br>union hold{<br>      Int digit;<br>      Double bigfl;<br>      Char letter;<br>      };<br>联合所占的字节大小是里面包含的字节类型最大的。<br>创建联合变量和结构体一致；</p><h2 id="枚举类型"><a href="#枚举类型" class="headerlink" title="枚举类型"></a>枚举类型</h2><p>能定义类型int的就能定义enum；</p><p>Enum{red，orange，yellow，green，blue，violet}<br>默认值:花括号里面元素的默认值是从0开始依次以1递增。<br>赋值:enum={low=100，slats=200}；如果只赋值一个那么在他后面的元素也是一一递增。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;简单地回忆下结构体：&lt;/p&gt;
&lt;h2 id=&quot;声明结构体类型：&quot;&gt;&lt;a href=&quot;#声明结构体类型：&quot; class=&quot;headerlink&quot; title=&quot;声明结构体类型：&quot;&gt;&lt;/a&gt;声明结构体类型：&lt;/h2&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>指针和数组之间的关系</title>
    <link href="http://yoursite.com/2019/09/14/%E6%95%B0%E7%BB%84%E5%92%8C%E6%8C%87%E9%92%88%E7%9A%84%E5%85%B3%E7%B3%BB/"/>
    <id>http://yoursite.com/2019/09/14/数组和指针的关系/</id>
    <published>2019-09-14T11:11:33.324Z</published>
    <updated>2019-09-14T11:37:01.561Z</updated>
    
    <content type="html"><![CDATA[<h1 id="指针和数组之间的关系"><a href="#指针和数组之间的关系" class="headerlink" title="指针和数组之间的关系"></a>指针和数组之间的关系</h1><a id="more"></a><p>1.数组名是数组首元素的地址；<br><img src="https://s2.ax1x.com/2019/09/14/n6wUz9.png" alt="n6wUz9.png" border="0"><br>这样就验证了上面所说的，并且地址也是一样的<br>Int sun(int ar[], int n);<br>Int sum(int <em>ar,int n);这两者是等同的可以推导出ar[i]和</em>ar(ar+i)相同；<br>下面用一个简单的程序来展现指针的数组的关系；</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#define SIZE 10</span><br><span class="line">int sump(int *start,int *end);</span><br><span class="line">int sump(int *start,int *end)</span><br><span class="line">&#123;</span><br><span class="line">int total=0;</span><br><span class="line">while(start&lt;end)</span><br><span class="line">&#123;</span><br><span class="line">total+=*start;  //该函数让数组里面值相加；不像平常的数组遍历相加； 当然这个也可以直接压缩为total+=*start++;</span><br><span class="line">start++;   //指针指向下一个地址； </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">return total;</span><br><span class="line">&#125;</span><br><span class="line">int main(void)</span><br><span class="line">&#123;</span><br><span class="line">int marbles[SIZE]=&#123;20,10,30&#125;;</span><br><span class="line">long answer;</span><br><span class="line"></span><br><span class="line">answer=sump(marbles,marbles+SIZE);</span><br><span class="line">printf(&quot;输出%d:\n&quot;,answer);</span><br><span class="line"></span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过这段代码我们也可以更加清晰的了解指针的便利性。</p><h2 id="C语言对于p-1和-p-1-的区别"><a href="#C语言对于p-1和-p-1-的区别" class="headerlink" title="C语言对于p+1和(p+1)的区别"></a>C语言对于<em>p+1和</em>(p+1)的区别</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">int main(void)</span><br><span class="line">&#123;</span><br><span class="line">int a[5]=&#123;4,2,5&#125;;</span><br><span class="line">int *p;</span><br><span class="line"></span><br><span class="line">p=a; //指针赋值数组 </span><br><span class="line">printf(&quot;数组的数值:%d\n&quot;,a[0]);</span><br><span class="line">    printf(&quot;数值*p:%d\n&quot;,*p);</span><br><span class="line">    printf(&quot;*p+2=%d\n&quot;,*p+2);//数值加一；</span><br><span class="line">    printf(&quot;*(p+1)=%d\n&quot;,*(p+1));//地址加1；</span><br><span class="line">    </span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://s2.ax1x.com/2019/09/14/n6BzPU.png" alt="n6BzPU.png" border="0">如果这里的指针想要的是a[2]的值呢可以p=&a[2]；为什么呢？因为 a[2]已经是一个数值了，但是指针仍然是一个地址我们利用取地址符号就可以实现了。<h2 id="指针的加减法"><a href="#指针的加减法" class="headerlink" title="指针的加减法"></a>指针的加减法</h2><p>讲到这里,那么指针的加减法怎么计算的呢？<br>指针的加法是字节数的相加（字节取决于指针的类型）,<br>例如int *p = (int *)1000;  printf(“%d\n”,p+1);//1004；<br>当然-1 -2这种也是字节数计算；<br>然而有意思的是指针与指针的减法却不是字节的相减：指针的减法只能是同一类型，或者同一个数组的指针才能实现，并且得到的应该是元素的个数，例如：<br><img src="https://s2.ax1x.com/2019/09/14/n6DDZq.png" alt="n6DDZq.png" border="0"><br>但是我们想要用P2+P1,编译器却报错的，因为这个是没有意义的，可能相加直接就超过了内存的最大值。</p><h2 id="p-和（p）-p-p的意义"><a href="#p-和（p）-p-p的意义" class="headerlink" title="p++和（p）++,++p,++*p的意义"></a>p++和（<em>p）++,</em>++p,++*p的意义</h2><img src="https://s2.ax1x.com/2019/09/14/n6DLSe.png" alt="n6DLSe.png" border="0">注意*p++只是把这个数取值到下一个了，并没有直接取值：<img src="https://s2.ax1x.com/2019/09/14/n6rUk6.png" alt="n6rUk6.png" border="0"><h2 id="指针数组和数组指针"><a href="#指针数组和数组指针" class="headerlink" title="指针数组和数组指针"></a>指针数组和数组指针</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">int *p1[5]；</span><br><span class="line">int (*p2)[5]；</span><br></pre></td></tr></table></figure><p>先看1，p1优先和[]结合所以int修饰的是一个数组，因而是指针数组（指针可以当做一个形容词）。再看2，（）的优先级大于[]不必多说那么直接同理1.</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;指针和数组之间的关系&quot;&gt;&lt;a href=&quot;#指针和数组之间的关系&quot; class=&quot;headerlink&quot; title=&quot;指针和数组之间的关系&quot;&gt;&lt;/a&gt;指针和数组之间的关系&lt;/h1&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>数据结构心得之线性表</title>
    <link href="http://yoursite.com/2019/09/08/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E9%93%BE%E8%A1%A8%EF%BC%88-%EF%BC%89/"/>
    <id>http://yoursite.com/2019/09/08/数据结构之链表（-）/</id>
    <published>2019-09-08T13:59:31.048Z</published>
    <updated>2019-09-18T13:17:31.071Z</updated>
    
    <content type="html"><![CDATA[<h2 id="线性表"><a href="#线性表" class="headerlink" title="线性表"></a>线性表</h2><p>线性表的顺序存储结构和线性表的链式存储结构分别是随机存取和顺序存取。<a id="more"></a><br>线性表长度的定义是它所包含的元素的个数。<br>元素的类型决定了元素所占用存储空间的大小，但元素的个数不等价于元素的类型。<br>s=p-&gt;next：用S来替换指针；<br>p-&gt;next=s：p的后继结点是S；<br><img src="https://s2.ax1x.com/2019/09/08/nGW5m4.png" alt="nGW5m4.png" border="0"></p><h3 id="顺序存储结构"><a href="#顺序存储结构" class="headerlink" title="顺序存储结构"></a>顺序存储结构</h3><p>缺点：插入删除需要移动大量元素.</p><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><ol><li>插入算法的思路：<br>如果插入位置不合理，抛出异常；<br>如果线性表长度大于等于数组长度，则抛出异常或动态增加容量；<br>从最后一个元素开始向前遍历到第i个位置，分别将它们都向后移动一个位置；<br>将要插入元素填入位置i处； ?表长加1。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">/* 初始条件：顺序线性表L已存在，1≤i≤</span><br><span class="line">   ListLength(L)， */</span><br><span class="line">/* 操作结果：在L中第i个位置之前插入新的数据元</span><br><span class="line">   素e，L的长度加1 */</span><br><span class="line">Status ListInsert(SqList *L, int i, ElemType e)</span><br><span class="line">&#123;</span><br><span class="line">    int k;</span><br><span class="line">    /* 顺序线性表已经满 */</span><br><span class="line">    if (L-&gt;length == MAXSIZE)                       </span><br><span class="line">        return ERROR;</span><br><span class="line">    /* 当i不在范围内时 */</span><br><span class="line">    if (i &lt; 1 || i &gt;L-&gt;length + 1) </span><br><span class="line">            return ERROR;</span><br><span class="line">    /* 若插入数据位置不在表尾 */</span><br><span class="line">    if (i &lt;= L-&gt;length)                             </span><br><span class="line">    &#123;</span><br><span class="line">        /*将要插入位置后数据元素向后移动一位 */</span><br><span class="line">        for (k = L-&gt;length - 1; k &gt;= i - 1; k--)    /*从后面开始遍历过来然后替换位置*/</span><br><span class="line">            L-&gt;data[k + 1] = L-&gt;data[k];/*位置+1*/</span><br><span class="line">    &#125;</span><br><span class="line">    /* 将新元素插入 */</span><br><span class="line">    L-&gt;data[i - 1] = e;                             </span><br><span class="line">    L-&gt;length++;</span><br><span class="line">    return OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>2.删除<br>删除算法的思路：<br>如果删除位置不合理，抛出异常；<br>取出删除元素；<br>从删除元素位置开始遍历到最后一个元素位置，分别将它们都向前移动一个位置；<br>表长减1。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">/* 初始条件：顺序线性表L已存在，1≤i≤</span><br><span class="line">   ListLength(L) */</span><br><span class="line">/* 操作结果：删除L的第i个数据元素，并用e返回</span><br><span class="line">   其值，L的长度减1 */</span><br><span class="line">Status ListDelete(SqList *L, int i, ElemType *e)</span><br><span class="line">&#123;</span><br><span class="line">    int k;</span><br><span class="line">    /* 线性表为空 */</span><br><span class="line">    if (L-&gt;length == 0)                    </span><br><span class="line">           return ERROR;</span><br><span class="line">    /* 删除位置不正确 */</span><br><span class="line">    if (i &lt; 1 || i &gt; L-&gt;length)            </span><br><span class="line">        return ERROR;</span><br><span class="line">    *e = L-&gt;data[i - 1];</span><br><span class="line">    /* 如果删除不是最后位置 */</span><br><span class="line">    if (i &lt; L-&gt;length)                     </span><br><span class="line">    &#123;</span><br><span class="line">        /* 将删除位置后继元素前移 */</span><br><span class="line">        for (k = i; k &lt; L-&gt;length; k++)    </span><br><span class="line">            L-&gt;data[k - 1] = L-&gt;data[k];</span><br><span class="line">    &#125;</span><br><span class="line">    L-&gt;length--;</span><br><span class="line">    return OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="习题"><a href="#习题" class="headerlink" title="习题"></a>习题</h4><p>1.NumberList是一个顺序容器，以下代码执行后，NumberList里的元素依次为：<br>List<int> NumberList = new List<int>(){2,4,1,3,5};<br>for(int i = 0;i&lt;NumberList.Count;++i)<br>{<br>     int v = NumberList[i];<br>     if(v%2 = = 0)<br>     {<br>         NumberList.Remove(v);//删除的是元素，而非下标<br>     }<br>}<br>解：剩下的是{4,1,3,5}，第一次循环扫描的是i=0位置的元素（2），因为删除了所有的元素向前移动一位所以4就变成了i=0，第二次扫描的是i=1的位置，已经变成了1，以此类推，剩下的就是{4,1,3,5}</int></int></p><img src="https://s2.ax1x.com/2019/09/08/nGRjds.jpg" alt="nGRjds.jpg" border="0"><h3 id="链式存储结构"><a href="#链式存储结构" class="headerlink" title="链式存储结构"></a>链式存储结构</h3><p>链式结构中，除了要存数据元素信息外，还要存储它的后继元素的存储地址。<br><img src="https://s2.ax1x.com/2019/09/08/nGf09x.png" alt="nGf09x.png" border="0"><br>数据域和指针域形成结点(NODE)<br>链表中第一个结点的存储位置叫做头指针，那么整个链表的存取就必须是从头指针开始进行了。之后的每一个结点，其实就是上一个的后继指针指向的位置。线性链表的最后一个结点指针为“空”（通常用NULL或“^”符号表示）</p><h4 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h4><img src="https://s2.ax1x.com/2019/09/08/nGfW4I.png" alt="nGfW4I.png" border="0">1.链式存储结构的基本形式假设p是指向线性表第i个元素的指针，则该结点ai的数据域我们可以用p->data来表示，p->data的值是一个数据元素，结点ai的指针域可以用p->next来表示，p->next的值是一个指针。p->next指向谁呢？当然是指向第i+1个元素，即指向ai+1的指针。<img src="https://s2.ax1x.com/2019/09/08/nGfv80.png" alt="nGfv80.png" border="0"><h4 id="单链表"><a href="#单链表" class="headerlink" title="单链表"></a>单链表</h4><p>存储密度:结点数据本身所占的存储量和整个结点结构所占的存储量之比，而单链表的NODE由date和next组成所以 他的存储密度是&lt;1的。<br>优势在于只要简单的复制移动指针，而顺序存储结构每一次插入都系要移动n-i个结点.<br><img src="https://s2.ax1x.com/2019/09/09/nGq9rq.png" alt="nGq9rq.png" border="0"></p><h5 id="概念-2"><a href="#概念-2" class="headerlink" title="概念"></a>概念</h5><h5 id="读取第I个元素"><a href="#读取第I个元素" class="headerlink" title="读取第I个元素"></a>读取第I个元素</h5><p>从头开始找，直到第i个结点为止。由于这个算法的时间复杂度取决于i的位置，当i=1时，则不需遍历，第一个就取出数据了，而当i=n时则遍历n-1次才可以。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">/* 初始条件：顺序线性表L已存在，1≤i≤</span><br><span class="line">   ListLength(L) */</span><br><span class="line">/* 操作结果：用e返回L中第i个数据元素的值 */</span><br><span class="line">Status GetElem(LinkList L, int i, ElemType *e)</span><br><span class="line">&#123;</span><br><span class="line">    int j;</span><br><span class="line">    LinkList p;            /* 声明一指针p */</span><br><span class="line">    p = L-&gt;next;        /* 让p指向链表L的第个结点 */</span><br><span class="line">    j = 1;                 /* j为计数器 */</span><br><span class="line">    /* p不为空且计数器j还没有等于i时，循环继续 */</span><br><span class="line">    while (p &amp;&amp; j &lt; i)    </span><br><span class="line">    &#123;</span><br><span class="line">        p = p-&gt;next;    /* 让p指向下一个结点 */</span><br><span class="line">        ++j;</span><br><span class="line">    &#125;</span><br><span class="line">    if (!p || j &gt; i)</span><br><span class="line">        return ERROR;      /* 第i个结点不存在 */</span><br><span class="line">    *e = p-&gt;data;       /* 取第i个结点的数据 */</span><br><span class="line">    return OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h5><img src="https://s2.ax1x.com/2019/09/08/nGHghQ.png" alt="nGHghQ.png" border="0"><img src="https://s2.ax1x.com/2019/09/08/nGHRpj.png" alt="nGHRpj.png" border="0"><p>s-&gt;next = p-&gt;next; p-&gt;next = s;<br>p的后继结点改成s的后继结点，再把结点s变成p的后继结点</p><h5 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h5><img src="https://s2.ax1x.com/2019/09/08/nGb6Dx.png" alt="nGb6Dx.png" border="0"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">/* 初始条件：顺序线性表L已存在，1≤i≤</span><br><span class="line">   ListLength(L) */</span><br><span class="line">1./* 操作结果：删除L的第i个结点，并用e返回其</span><br><span class="line">2.   值，L的长度减1 */</span><br><span class="line">3.Status ListDelete(LinkList *L, int i, ElemType *e)</span><br><span class="line">4.&#123;</span><br><span class="line">5.    int j;</span><br><span class="line">6.    LinkList p, q;</span><br><span class="line">7.    p = *L;</span><br><span class="line">8.    j = 1;</span><br><span class="line">9.    /* 遍历寻找第i-1个结点 */</span><br><span class="line">10.    while (p-&gt;next &amp;&amp; j &lt; i)    </span><br><span class="line">11.    &#123;</span><br><span class="line">12.        p = p-&gt;next;</span><br><span class="line">13.        ++j;</span><br><span class="line">14.    &#125;</span><br><span class="line">15.    /* 第i个结点不存在 */</span><br><span class="line">16.    if (!(p-&gt;next) || j &gt; i)</span><br><span class="line">17.        return ERROR;           </span><br><span class="line">18.    q = p-&gt;next;</span><br><span class="line">19.    /* 将q的后继赋值给p的后继 */</span><br><span class="line">20.    p-&gt;next = q-&gt;next;          </span><br><span class="line">21.    /* 将q结点中的数据给e */</span><br><span class="line">22.    *e = q-&gt;data;               </span><br><span class="line">23.    /* 让系统回收此结点，释放内存 */</span><br><span class="line">24.    free(q);                    </span><br><span class="line">25.    return OK;</span><br><span class="line">26.&#125;</span><br></pre></td></tr></table></figure><h5 id="尾插法，头插法"><a href="#尾插法，头插法" class="headerlink" title="尾插法，头插法"></a>尾插法，头插法</h5><img src="https://s2.ax1x.com/2019/09/08/nGbIxA.png" alt="nGbIxA.png" border="0"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">/* 随机产生n个元素的值，建立带表头结点的单链</span><br><span class="line">线性表L（尾插法） */</span><br><span class="line">void CreateListTail(LinkList *L, int n)</span><br><span class="line">&#123;</span><br><span class="line">    LinkList p,r;</span><br><span class="line">    int i;</span><br><span class="line">    /* 初始化随机数种子 */</span><br><span class="line">    srand(time(0));                         </span><br><span class="line">    /* 为整个线性表 */</span><br><span class="line">    *L = (LinkList)malloc(sizeof(Node));    </span><br><span class="line">    /* r为指向尾部的结点 */</span><br><span class="line">    r = *L;                                 </span><br><span class="line">    for (i = 0; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        /* 生成新结点 */</span><br><span class="line">        p = (Node *)malloc(sizeof(Node));   </span><br><span class="line">        /* 随机生成100以内的数字 */</span><br><span class="line">        p-&gt;data = rand() % 100 + 1;         </span><br><span class="line">        /* 将表尾终端结点的指针指向新结点 */</span><br><span class="line">        r-&gt;next = p;                        </span><br><span class="line">        /* 将当前的新结点定义为表尾终端结点 */</span><br><span class="line">        r = p;                    /*因为这个时候不是最后一个了让r继续变成最后一个*/          </span><br><span class="line">    &#125;</span><br><span class="line">    /* 表示当前链表结束 */</span><br><span class="line">    r-&gt;next = NULL;                         </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://s2.ax1x.com/2019/09/08/nGbLa8.png" alt="nGbLa8.png" border="0"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">/* 随机产生n个元素的值，建立带表头结点的单链</span><br><span class="line">   线性表L（头插法） */</span><br><span class="line">void CreateListHead(LinkList *L, int n)</span><br><span class="line">&#123;</span><br><span class="line">    LinkList p;</span><br><span class="line">    int i;</span><br><span class="line">    /* 初始化随机数种子 */</span><br><span class="line">    srand(time(0));                            </span><br><span class="line">    *L = (LinkList)malloc(sizeof(Node));</span><br><span class="line">    /* 先建立一个带头结点的单链表 */</span><br><span class="line">    (*L)-&gt;next = NULL;                         </span><br><span class="line">    for (i = 0; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        /* 生成新结点 */</span><br><span class="line">        p = (LinkList)malloc(sizeof(Node));    </span><br><span class="line">        /* 随机生成100以内的数字 */</span><br><span class="line">        p-&gt;data = rand() % 100 + 1;            </span><br><span class="line">        p-&gt;next = (*L)-&gt;next;</span><br><span class="line">        /* 插入到表头 */</span><br><span class="line">        (*L)-&gt;next = p;                        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>#####单链表的整表删除</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">/* 初始条件：顺序线性表L已存在，操作结果：将L</span><br><span class="line">   重置为空表 */</span><br><span class="line">Status ClearList(LinkList *L)</span><br><span class="line">&#123;</span><br><span class="line">    LinkList p, q;</span><br><span class="line">    /* p指向第一个结点 */</span><br><span class="line">    p = (*L)-&gt;next;       </span><br><span class="line">    /* 没到表尾 */</span><br><span class="line">    while (p)             </span><br><span class="line">    &#123;</span><br><span class="line">        q = p-&gt;next;</span><br><span class="line">        free(p);</span><br><span class="line">        p=q;</span><br><span class="line">    &#125;</span><br><span class="line">    /* 头结点指针域为空 */</span><br><span class="line">    (*L)-&gt;next = NULL;    </span><br><span class="line">    return OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h5><ol><li>在一个长度为n的单链表的第i（0&lt;=i&lt;n）个元素后面插入一个元素时，需要向后移动（　0  ）个元素。#神坑  单链表不需要移动元素！！！</li></ol><h4 id="静态链表"><a href="#静态链表" class="headerlink" title="静态链表"></a>静态链表</h4><p>数组的每个下标都对应一个data和一个cur。数据域data，用来存放数据元素，也就是通常我们要处理的数据；而cur相当于单链表中的next指针，存放该元素的后继在数组中的下标，我们把cur叫做游标。<br>数组第一个元素，即下标为0的元素的cur就存放备用链表的第一个结点的下标；而数组的最后一个元素的cur则存放第一个有数值的元素的下标，相当于单链表中的头结点作用,整个链表为空时，则为0.<br><img src="https://s2.ax1x.com/2019/09/18/nH1xv8.png" alt="nH1xv8.png" border="0"><br>摘抄一下大话数据结构来理解：<br><img src="https://s2.ax1x.com/2019/09/18/nHJuqS.png" alt="nHJuqS.png" border="0"><br>此时“甲”这里就存有下一元素“乙”的游标2，“乙”则存有下一元素“丁”的下标3。而“庚”是最后一个有值元素，所以它的cur设置为0。而最后一个元素的cur则因“甲”是第一有值元素而存有它的下标为1。而第一个元素则因空闲空间的第一个元素下标为7，所以它的cur存有7。</p><p>不需要移动元素但是失去了顺序存储结构随机存取的特性</p><h5 id="概念-3"><a href="#概念-3" class="headerlink" title="概念"></a>概念</h5><p>1.插入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">2./* 在L中第i个元素之前插入新的数据元素e  */</span><br><span class="line">3.  Status ListInsert(StaticLinkList L, int i, ElemType e)</span><br><span class="line">4.  &#123;</span><br><span class="line">5.      int j, k, l;</span><br><span class="line">6.      /* 注意k首先是最后一个元素的下标 */</span><br><span class="line">7.      k = MAX_SIZE - 1;                   </span><br><span class="line">8.      if (i &lt; 1 || i &gt; ListLength(L) + 1)</span><br><span class="line">9.          return ERROR;</span><br><span class="line">10.      /* 获得空闲分量的下标 */</span><br><span class="line">11.      j = Malloc_SSL(L);                  </span><br><span class="line">12.      if (j)</span><br><span class="line">13.      &#123;</span><br><span class="line">14.         /* 将数据赋值给此分量的data */</span><br><span class="line">15.         L[j].data = e;</span><br><span class="line">                   //此时下标为0的cur也因为7要被占用而更改备用链表的值为8。备用元素是最后一个有值元素的后面一个。   </span><br><span class="line">16.         /* 找到第i个元素之前的位置 */</span><br><span class="line">17.         for (l = 1; l &lt;= i - 1; l++)    </span><br><span class="line">18.             k = L[k].cur;</span><br><span class="line">                  //丙插进来说明i=3，for循环l由1到2，执行两次。代码k=L[k].cur;使得k=999,得到k=L[999].cur=1，再得到k=L[1].cur=2</span><br><span class="line">19.         /* 把第i个元素之前的cur赋值给新元素的cur */</span><br><span class="line">20.         L[j].cur = L[k].cur;        /*肯定要先把原来的值给要添加进来的值嘛，不然这个值提前变了，乙的cur给丙*/</span><br><span class="line">21.         /* 把新元素的下标赋值给第i个元素之前元素的cur */</span><br><span class="line">22.         L[k].cur = j;                   </span><br><span class="line">23.         return OK;</span><br><span class="line">24.     &#125;</span><br><span class="line">25.     return ERROR;</span><br></pre></td></tr></table></figure><p>2.删除<br>for循环因为i=1而不操作，j=L[999].cur=1，L[k].cur=L[j].cur也就是L[999].cur=L[1].cur=2。这其实就是告诉计算机现在“甲”已经离开了，“乙”才是第一个元素。（最后一个值对应的是第一个有值元素。这里指向了乙说明甲已经没了）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">Status ListDelete(StaticLinkList L, int i)</span><br><span class="line">&#123;</span><br><span class="line">    int j, k;</span><br><span class="line">    if (i &lt; 1 || i &gt; ListLength(L))</span><br><span class="line">        return ERROR;</span><br><span class="line">    k = MAX_SIZE - 1;</span><br><span class="line">    for (j = 1; j &lt;= i - 1; j++)</span><br><span class="line">        k = L[k].cur;</span><br><span class="line">    j = L[k].cur;</span><br><span class="line">    L[k].cur = L[j].cur;</span><br><span class="line">    Free_SSL(L, j);</span><br><span class="line">    return OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/* 将下标为k的空闲结点回收到备用链表 */</span><br><span class="line">void Free_SSL(StaticLinkList space, int k)</span><br><span class="line">&#123;</span><br><span class="line">    /* 把第一个元素cur值赋给要删除的分量cur */</span><br><span class="line">    space[k].cur = space[0].cur;    </span><br><span class="line">    /* 把要删除的分量下标赋值给第一个元素的cur */</span><br><span class="line">    space[0].cur = k;               </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ree_SSL（L,j）;是什么意思呢？<br>意思就是“甲”现在要走，这个位置就空出来了，也就是，未来如果有新人来，最优先考虑这里，所以原来的第一个空位分量，即下标是8的分量，它降级了，把8给“甲”所在下标为1的分量的cur，也就是space[1].cur=space[0].cur=8，而space[0].cur=k=1其实就是让这个删除的位置成为第一个优先空位，把它存入第一个元素的cur中。<br><img src="https://s2.ax1x.com/2019/09/18/nH06bt.png" alt="nH06bt.png" border="0"></p><h4 id="循环列表"><a href="#循环列表" class="headerlink" title="循环列表"></a>循环列表</h4><p>单链表中终端结点的指针端由空指针改为指向头结点，就使整个单链表形成一个环，这种头尾相接的单链表称为单循环链表，简称循环链表</p><p>判断循环是否结束：循环链表和单链表的主要差异就在于循环的判断条件上，原来是判断p-&gt;next是否为空，现在则是p-&gt;next不等于头结点</p><h5 id="概念-4"><a href="#概念-4" class="headerlink" title="概念"></a>概念</h5><p>将单链表中终端结点的指针端由空指针改为指向头结点，就使整个单链表形成一个环，这种头尾相接的单链表称为单循环链表，简称循环链表（circular linked list）。</p><p>循环链表和单链表的主要差异就在于循环的判断条件上，原来是判断p-&gt;next是否为空，现在则是p-&gt;next不等于头结点，则循环未结束。</p><p>改造：<br>有没有可能用O(1)的时间由链表指针访问到最后一个结点呢？当然可以。<br>改造一下这个循环链表，不用头指针，而是用指向终端结点的尾指针来表示循环链表，此时查找开始结点和终端结点都很方便了。<br><img src="https://s2.ax1x.com/2019/09/18/nHrR56.png" alt="nHrR56.png" border="0"><br>上图中可以看到，终端结点用尾指针rear指示，则查找终端结点是O(1)，而开始结点，其实就是rear-&gt;next-&gt;next，其时间复杂也为O(1)。</p><p>那么把两个循环列表合并在一起<br><img src="https://s2.ax1x.com/2019/09/18/nHs8JK.png" alt="nHs8JK.png" border="0"></p><img src="https://s2.ax1x.com/2019/09/18/nHsNsH.png" alt="nHsNsH.png" border="0"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">/* 保存A表的头结点，即① */</span><br><span class="line">p = rearA-&gt;next;           //存起来不然等等运行起来值就改变了。</span><br><span class="line">/*将本是指向B表的第一个结点（不是头结点） */</span><br><span class="line">rearA-&gt;next = rearB-&gt;next-&gt;next;    </span><br><span class="line">/* 赋值给reaA-&gt;next，即② */</span><br><span class="line">q = rearB-&gt;next;</span><br><span class="line">/* 将原A表的头结点赋值给rearB-&gt;next，即③ */</span><br><span class="line">rearB-&gt;next = p;                    </span><br><span class="line">/* 释放q */</span><br><span class="line">free(q);</span><br></pre></td></tr></table></figure><h4 id="双向链表"><a href="#双向链表" class="headerlink" title="双向链表"></a>双向链表</h4><p>双向链表中的结点都有两个指针域，一个指向直接后继，另一个指向直接前驱</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">/* 线性表的双向链表存储结构 */</span><br><span class="line">typedef struct DulNode</span><br><span class="line">&#123;</span><br><span class="line">    ElemType data;</span><br><span class="line">    struct DuLNode *prior;    /* 直接前驱指针 */</span><br><span class="line">    struct DuLNode *next;     /* 直接后继指针 */</span><br><span class="line">&#125; DulNode</span><br></pre></td></tr></table></figure><img src="https://s2.ax1x.com/2019/09/18/nHyOgS.png" alt="nHyOgS.png" border="0">这是一个带头结点的空的双向链表<p>双向链表有趣的地方：p-&gt;next-&gt;prior = p = p-&gt;prior-&gt;next；后继的前继是自己，反之也是自己<br>1.插入<br><img src="https://s2.ax1x.com/2019/09/18/nH6l8K.png" alt="nH6l8K.png" border="0"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">/* 把p赋值给s的前驱，如图中① */</span><br><span class="line">s-&gt;prior = p;          </span><br><span class="line">/* 把p-&gt;next赋值给s的后继，如图中② */</span><br><span class="line">s-&gt;next = p-&gt;next;     </span><br><span class="line">/* 把s赋值给p-&gt;next的前驱，如图中③ */</span><br><span class="line">p-&gt;next-&gt;prior = s;    </span><br><span class="line">/* 把s赋值给p的后继，如图中④ */</span><br><span class="line">p-&gt;next = s;</span><br></pre></td></tr></table></figure><p>2.删除</p><img src="https://s2.ax1x.com/2019/09/18/nH6oMF.png" alt="nH6oMF.png" border="0"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">/* 把p-&gt;next赋值给p-&gt;prior的后继，如图中① */</span><br><span class="line">p-&gt;prior-&gt;next = p-&gt;next;     </span><br><span class="line">/* 把p-&gt;prior赋值给p-&gt;next的前驱，如图中② */</span><br><span class="line">p-&gt;next-&gt;prior = p-&gt;prior;    </span><br><span class="line">/* 释放结点 */</span><br><span class="line">free(p);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;线性表&quot;&gt;&lt;a href=&quot;#线性表&quot; class=&quot;headerlink&quot; title=&quot;线性表&quot;&gt;&lt;/a&gt;线性表&lt;/h2&gt;&lt;p&gt;线性表的顺序存储结构和线性表的链式存储结构分别是随机存取和顺序存取。
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>111</title>
    <link href="http://yoursite.com/2019/09/07/hello-world/"/>
    <id>http://yoursite.com/2019/09/07/hello-world/</id>
    <published>2019-09-07T11:39:44.326Z</published>
    <updated>2019-09-09T12:29:53.938Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://www.baidu.com" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><a id="more"></a><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://www.baidu.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Quick-Start&quot;&gt;&lt;a href=&quot;#Quick-Start&quot; class=&quot;headerlink&quot; title=&quot;Quick Start&quot;&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;
    
    </summary>
    
    
    
  </entry>
  
</feed>
