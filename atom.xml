<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>小帅气</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-09-17T14:19:06.536Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Johnson</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>简单的字符串整理</title>
    <link href="http://yoursite.com/2019/09/17/%E7%AE%80%E5%8D%95%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%95%B4%E7%90%86/"/>
    <id>http://yoursite.com/2019/09/17/简单的字符串整理/</id>
    <published>2019-09-17T12:27:05.823Z</published>
    <updated>2019-09-17T14:19:06.536Z</updated>
    
    <content type="html"><![CDATA[<h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><p>Scanf只能读取一个单词不能读取整个句子遇到遇到，只能读到第一个空格；<a id="more"></a><br>拓展一下scanf，scanf(“%8s”,&amp;A); printf(“%s”,A);这样只能读8位字符，并且中间有空格也只能读到空格前面的内容；<br>于是引出了gets（）：可以读取整行，直到遇到换行符号，然后丢弃换行符号；但是gets（）可能因为长度太长而溢出缓冲区。所以c99规定了fget（）函数。<br>相对应的printf（）和puts（）的区别：puts（）读取的时间比较快并且自动添加了换行符号，但是printf（）可以更方便读取多个字符串；</p><h2 id="Strlen（）"><a href="#Strlen（）" class="headerlink" title="Strlen（）"></a>Strlen（）</h2><p>统计字符串长度，不包括换行符；</p><h2 id="Strcat（）"><a href="#Strcat（）" class="headerlink" title="Strcat（）"></a>Strcat（）</h2><p>用于拼接两个字符串，合并成一个字符串作为第一个字符串，函数返回的是第一个字符串（这个字符串已经和字符串二拼接）</p><h2 id="Strncat（）"><a href="#Strncat（）" class="headerlink" title="Strncat（）"></a>Strncat（）</h2><p>因为strcat（）跟gets（）一样会溢出缓冲区所以延伸了该函数，如果太长的话字符串会追加到第一个字符串的尾部然后加上’\0’;</p><p>##Strcmp（）<br>比较两个字符串是否相同（不是比较字符单引号字符双引号字符串），相同的话为0，不同的话如果第一个的ASCII比较大返回1反之返回-1；可以利用这个返回值来排序字符串。</p><h2 id="Strncmp（）"><a href="#Strncmp（）" class="headerlink" title="Strncmp（）"></a>Strncmp（）</h2><p>可以比较两个字符串至第几个参数，例如只想要比较前五个字符，strncmp（”helloworld”,”hello”,5）;</p><h2 id="Strcpy（）和strncpy（）"><a href="#Strcpy（）和strncpy（）" class="headerlink" title="Strcpy（）和strncpy（）"></a>Strcpy（）和strncpy（）</h2><p>将字符串拷贝进一个临时数组，而strncpy（）就是担心缓冲区溢出；</p><h2 id="Sprintf（）"><a href="#Sprintf（）" class="headerlink" title="Sprintf（）"></a>Sprintf（）</h2><p>Printf（）是打印到显示器上，该函数是打印到字符串里面，可以把多个元素组合成一个字符串</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;字符串&quot;&gt;&lt;a href=&quot;#字符串&quot; class=&quot;headerlink&quot; title=&quot;字符串&quot;&gt;&lt;/a&gt;字符串&lt;/h2&gt;&lt;p&gt;Scanf只能读取一个单词不能读取整个句子遇到遇到，只能读到第一个空格；
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>结构体和指针的关系</title>
    <link href="http://yoursite.com/2019/09/17/%E7%BB%93%E6%9E%84%E4%BD%93%E5%92%8C%E6%8C%87%E9%92%88%E7%9A%84%E5%85%B3%E7%B3%BB/"/>
    <id>http://yoursite.com/2019/09/17/结构体和指针的关系/</id>
    <published>2019-09-17T12:22:37.003Z</published>
    <updated>2019-09-17T12:25:29.824Z</updated>
    
    <content type="html"><![CDATA[<p>简单地回忆下结构体：</p><h2 id="声明结构体类型："><a href="#声明结构体类型：" class="headerlink" title="声明结构体类型："></a>声明结构体类型：</h2><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">int main(void)</span><br><span class="line">&#123;</span><br><span class="line">struct teacher&#123; //声明一个结构体变量 struct tearcher相当于int char 定义变量的类型 </span><br><span class="line">int num;</span><br><span class="line">char name[10];</span><br><span class="line">char sex;</span><br><span class="line">int age;</span><br><span class="line">char department[20];</span><br><span class="line">float wage;</span><br><span class="line">&#125;;</span><br><span class="line">return 0;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h2 id="定义结构体变量"><a href="#定义结构体变量" class="headerlink" title="定义结构体变量"></a>定义结构体变量</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">int main(void)</span><br><span class="line">&#123;</span><br><span class="line">struct teacher&#123; //声明一个结构体变量 struct tearcher相当于int char 定义变量的类型 </span><br><span class="line">int num;</span><br><span class="line">char name[10];</span><br><span class="line">char sex;</span><br><span class="line">int age;</span><br><span class="line">char department[20];</span><br><span class="line">float wage;</span><br><span class="line">&#125;tearcher1，teacher2;//或者struct teacher teacher1,teacher2；</span><br><span class="line">return 0;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h2 id="结构体变量的引用："><a href="#结构体变量的引用：" class="headerlink" title="结构体变量的引用："></a>结构体变量的引用：</h2><p>结构体变量.成员名<br>Eg：teacher1.age=25；</p><h2 id="结构体数组"><a href="#结构体数组" class="headerlink" title="结构体数组"></a>结构体数组</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include&lt;string.h&gt;</span><br><span class="line">int main(void)</span><br><span class="line">&#123;</span><br><span class="line">struct teacher&#123; //声明一个结构体变量 struct tearcher相当于int char 定义变量的类型 </span><br><span class="line">int num;</span><br><span class="line">char name[10];</span><br><span class="line">char sex;</span><br><span class="line">int age;</span><br><span class="line">char department[20];</span><br><span class="line">float wage;</span><br><span class="line">&#125;tea[3];</span><br><span class="line"></span><br><span class="line">int i,j;</span><br><span class="line"></span><br><span class="line">for(i=0;i&lt;3;i++) &#123;   //使用双重循环来实现输入； </span><br><span class="line">  scanf(&quot;%d&quot;,&amp;tea[i]);</span><br><span class="line">  for(j=0;j&lt;10;j++)</span><br><span class="line">   scanf(&quot;%d&quot;,&amp;tea[i].name[j]); </span><br><span class="line">&#125; </span><br><span class="line">return 0;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h2 id="typedef简介"><a href="#typedef简介" class="headerlink" title="typedef简介"></a>typedef简介</h2><p>Typedof可以为某一类型自定义名称，#define是定义值的大小，typedof定义的就是类型的名称；<br>Eg：typedof unsigned char byte；<br>byte i，y[10]，*z；<br>在结构体里面的应用:<br>typedef struct student<br>{<br>　　 int num;<br>}STUDENT;//将struct student类型自定义名称STUDENT;</p><p>然后可以使用typedof定义的类型名；<br>STUDENT {10};<br>以上代码会被翻译：typedef struct student<br>{<br>　　 int num;<br>}STUDENT={10};</p><h2 id="结构体的嵌套"><a href="#结构体的嵌套" class="headerlink" title="结构体的嵌套"></a>结构体的嵌套</h2><p>在一个结构体内包含了另一个结构体作为其成员</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">struct STUDENT</span><br><span class="line">&#123;</span><br><span class="line">    long studentID;</span><br><span class="line">    char studentName[10];</span><br><span class="line">    char studentSex;</span><br><span class="line">    int score[4];</span><br><span class="line">    struct DATE</span><br><span class="line">    &#123;</span><br><span class="line">        int year;</span><br><span class="line">        int month;</span><br><span class="line">        int day;</span><br><span class="line">    &#125;birthday;</span><br><span class="line">&#125;student;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">student.birthday.day = 100;</span><br><span class="line">printf(&quot;%d&quot;, student.birthday.day);</span><br></pre></td></tr></table></figure><p>这是不使用typeof的<br>使用了typeof的:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">typedef struct date</span><br><span class="line">&#123;</span><br><span class="line">    int year;</span><br><span class="line">    int month;</span><br><span class="line">    int day;</span><br><span class="line">&#125;DATE;</span><br><span class="line"></span><br><span class="line">typedef struct student</span><br><span class="line">&#123;</span><br><span class="line">    long studentID;</span><br><span class="line">    char studentName[10];</span><br><span class="line">    char studentSex;</span><br><span class="line">    DATE birthday;  //对照typeof章节来进行。</span><br><span class="line">    int score[4];</span><br><span class="line">&#125;STUDENT;</span><br><span class="line">STUDENT pp;</span><br></pre></td></tr></table></figure><p>上面代码中，定义了结构体变量birthday和pp，并给struct date和struct student分别取别名为DATE和STUDENT，</p><p>当出现结构体嵌套时，必须以级联方式访问结构体成员，即通过成员选择运算符逐级找到最底层的成员时再引用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1 pp.birthday.day = 10;</span><br><span class="line">2 printf(&quot;%d&quot;, pp.birthday.day);</span><br></pre></td></tr></table></figure><h2 id="结构体与指针"><a href="#结构体与指针" class="headerlink" title="结构体与指针"></a>结构体与指针</h2><p>声明结构指针指针很简单:</p><h3 id="普通的定义方法"><a href="#普通的定义方法" class="headerlink" title="普通的定义方法"></a>普通的定义方法</h3><p>Struct guy *him;<br>假设现在bar是结构体类型的一个变量，那么想要让指针指向它可以<br>*him=&amp;bar 使用取地址符号是因为bar并不是一个数组名称；<br>那么现在我们定义一个结构数组fellow[ ];<br>Him=&amp;fellow[0]; </p><h3 id="使用typedof的定义"><a href="#使用typedof的定义" class="headerlink" title="使用typedof的定义"></a>使用typedof的定义</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">typedef struct student</span><br><span class="line">&#123;</span><br><span class="line">    long studentID;</span><br><span class="line">    char studentName[10];</span><br><span class="line">    char studentSex;</span><br><span class="line">    DATE birthday;</span><br><span class="line">    int score[4];</span><br><span class="line">&#125;STUDENT;</span><br><span class="line">STUDENT stu1;</span><br><span class="line">STUDENT *pt;</span><br><span class="line">pt = &amp;stu1;  // STUDENT *pt = &amp;stu1;</span><br></pre></td></tr></table></figure><p>假设一个已经声明了一个STUDENT结构体类型的包含30个元素的数组stu<br>STUDENT *pt = stu;// STUDENT *pt = &amp;stu[0]; //STUDENT *pt;pt = stu;</p><h2 id="用指针访问成员"><a href="#用指针访问成员" class="headerlink" title="用指针访问成员"></a>用指针访问成员</h2><p>Him==&amp;bar,那么him-&gt;income即是bar.income; bar.income==(*him).income</p><p>Him==&amp;fellow[0],那么him-&gt;income即是fewllow[0].income; fellow[0].income==(*him).income</p><h2 id="向函数传递结构的信息"><a href="#向函数传递结构的信息" class="headerlink" title="向函数传递结构的信息"></a>向函数传递结构的信息</h2><p>我们这里为了方便统一声明一个fouds结构<br>Struct funds<br>{<br>  Double bankund;<br>};<br>声明一个变量struct funds stan{略};</p><h3 id="传递结构的成员"><a href="#传递结构的成员" class="headerlink" title="传递结构的成员"></a>传递结构的成员</h3><p>定义一个函数double sum(double x,double y){ return(x+y);}<br>我们可以输出printf(“%f”,stan.bankfund);这样就传递了结构成员</p><h3 id="传递结构的地址"><a href="#传递结构的地址" class="headerlink" title="传递结构的地址"></a>传递结构的地址</h3><p>将结构的地址作为函数的参数，扯到地址那么就想到了指针:<br>Double sum（const struct fund *money）<br>{<br>  Return (money-&gt;bankfund+money-&gt;savefund);<br>}</p><p>Printf(“%f”,sum(&amp;stan));//因为结构体的变量名和数组不一样不是地址的别名所以需要加上取地址符号，而且函数定义的也是一个纸箱funds的指针。</p><h3 id="传递结构"><a href="#传递结构" class="headerlink" title="传递结构"></a>传递结构</h3><p>将结构作为函数的参数<br>Double sum（struct funds moolah）<br>{ return (moolah.bankfund+moolah.savefund); }<br>Printf(“%f”,sum(stan));</p><h2 id="联合"><a href="#联合" class="headerlink" title="联合"></a>联合</h2><p>Eg.声明一个联合<br>union hold{<br>      Int digit;<br>      Double bigfl;<br>      Char letter;<br>      };<br>联合所占的字节大小是里面包含的字节类型最大的。<br>创建联合变量和结构体一致；</p><h2 id="枚举类型"><a href="#枚举类型" class="headerlink" title="枚举类型"></a>枚举类型</h2><p>能定义类型int的就能定义enum；</p><p>Enum{red，orange，yellow，green，blue，violet}<br>默认值:花括号里面元素的默认值是从0开始依次以1递增。<br>赋值:enum={low=100，slats=200}；如果只赋值一个那么在他后面的元素也是一一递增。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;简单地回忆下结构体：&lt;/p&gt;
&lt;h2 id=&quot;声明结构体类型：&quot;&gt;&lt;a href=&quot;#声明结构体类型：&quot; class=&quot;headerlink&quot; title=&quot;声明结构体类型：&quot;&gt;&lt;/a&gt;声明结构体类型：&lt;/h2&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>指针和数组之间的关系</title>
    <link href="http://yoursite.com/2019/09/14/%E6%95%B0%E7%BB%84%E5%92%8C%E6%8C%87%E9%92%88%E7%9A%84%E5%85%B3%E7%B3%BB/"/>
    <id>http://yoursite.com/2019/09/14/数组和指针的关系/</id>
    <published>2019-09-14T11:11:33.324Z</published>
    <updated>2019-09-14T11:37:01.561Z</updated>
    
    <content type="html"><![CDATA[<h1 id="指针和数组之间的关系"><a href="#指针和数组之间的关系" class="headerlink" title="指针和数组之间的关系"></a>指针和数组之间的关系</h1><a id="more"></a><p>1.数组名是数组首元素的地址；<br><img src="https://s2.ax1x.com/2019/09/14/n6wUz9.png" alt="n6wUz9.png" border="0"><br>这样就验证了上面所说的，并且地址也是一样的<br>Int sun(int ar[], int n);<br>Int sum(int <em>ar,int n);这两者是等同的可以推导出ar[i]和</em>ar(ar+i)相同；<br>下面用一个简单的程序来展现指针的数组的关系；</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#define SIZE 10</span><br><span class="line">int sump(int *start,int *end);</span><br><span class="line">int sump(int *start,int *end)</span><br><span class="line">&#123;</span><br><span class="line">int total=0;</span><br><span class="line">while(start&lt;end)</span><br><span class="line">&#123;</span><br><span class="line">total+=*start;  //该函数让数组里面值相加；不像平常的数组遍历相加； 当然这个也可以直接压缩为total+=*start++;</span><br><span class="line">start++;   //指针指向下一个地址； </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">return total;</span><br><span class="line">&#125;</span><br><span class="line">int main(void)</span><br><span class="line">&#123;</span><br><span class="line">int marbles[SIZE]=&#123;20,10,30&#125;;</span><br><span class="line">long answer;</span><br><span class="line"></span><br><span class="line">answer=sump(marbles,marbles+SIZE);</span><br><span class="line">printf(&quot;输出%d:\n&quot;,answer);</span><br><span class="line"></span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过这段代码我们也可以更加清晰的了解指针的便利性。</p><h2 id="C语言对于p-1和-p-1-的区别"><a href="#C语言对于p-1和-p-1-的区别" class="headerlink" title="C语言对于p+1和(p+1)的区别"></a>C语言对于<em>p+1和</em>(p+1)的区别</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">int main(void)</span><br><span class="line">&#123;</span><br><span class="line">int a[5]=&#123;4,2,5&#125;;</span><br><span class="line">int *p;</span><br><span class="line"></span><br><span class="line">p=a; //指针赋值数组 </span><br><span class="line">printf(&quot;数组的数值:%d\n&quot;,a[0]);</span><br><span class="line">    printf(&quot;数值*p:%d\n&quot;,*p);</span><br><span class="line">    printf(&quot;*p+2=%d\n&quot;,*p+2);//数值加一；</span><br><span class="line">    printf(&quot;*(p+1)=%d\n&quot;,*(p+1));//地址加1；</span><br><span class="line">    </span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://s2.ax1x.com/2019/09/14/n6BzPU.png" alt="n6BzPU.png" border="0">如果这里的指针想要的是a[2]的值呢可以p=&a[2]；为什么呢？因为 a[2]已经是一个数值了，但是指针仍然是一个地址我们利用取地址符号就可以实现了。<h2 id="指针的加减法"><a href="#指针的加减法" class="headerlink" title="指针的加减法"></a>指针的加减法</h2><p>讲到这里,那么指针的加减法怎么计算的呢？<br>指针的加法是字节数的相加（字节取决于指针的类型）,<br>例如int *p = (int *)1000;  printf(“%d\n”,p+1);//1004；<br>当然-1 -2这种也是字节数计算；<br>然而有意思的是指针与指针的减法却不是字节的相减：指针的减法只能是同一类型，或者同一个数组的指针才能实现，并且得到的应该是元素的个数，例如：<br><img src="https://s2.ax1x.com/2019/09/14/n6DDZq.png" alt="n6DDZq.png" border="0"><br>但是我们想要用P2+P1,编译器却报错的，因为这个是没有意义的，可能相加直接就超过了内存的最大值。</p><h2 id="p-和（p）-p-p的意义"><a href="#p-和（p）-p-p的意义" class="headerlink" title="p++和（p）++,++p,++*p的意义"></a>p++和（<em>p）++,</em>++p,++*p的意义</h2><img src="https://s2.ax1x.com/2019/09/14/n6DLSe.png" alt="n6DLSe.png" border="0">注意*p++只是把这个数取值到下一个了，并没有直接取值：<img src="https://s2.ax1x.com/2019/09/14/n6rUk6.png" alt="n6rUk6.png" border="0"><h2 id="指针数组和数组指针"><a href="#指针数组和数组指针" class="headerlink" title="指针数组和数组指针"></a>指针数组和数组指针</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">int *p1[5]；</span><br><span class="line">int (*p2)[5]；</span><br></pre></td></tr></table></figure><p>先看1，p1优先和[]结合所以int修饰的是一个数组，因而是指针数组（指针可以当做一个形容词）。再看2，（）的优先级大于[]不必多说那么直接同理1.</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;指针和数组之间的关系&quot;&gt;&lt;a href=&quot;#指针和数组之间的关系&quot; class=&quot;headerlink&quot; title=&quot;指针和数组之间的关系&quot;&gt;&lt;/a&gt;指针和数组之间的关系&lt;/h1&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>数据结构心得之线性表</title>
    <link href="http://yoursite.com/2019/09/08/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E9%93%BE%E8%A1%A8%EF%BC%88-%EF%BC%89/"/>
    <id>http://yoursite.com/2019/09/08/数据结构之链表（-）/</id>
    <published>2019-09-08T13:59:31.048Z</published>
    <updated>2019-09-09T12:29:17.518Z</updated>
    
    <content type="html"><![CDATA[<h2 id="线性表"><a href="#线性表" class="headerlink" title="线性表"></a>线性表</h2><p>线性表的顺序存储结构和线性表的链式存储结构分别是随机存取和顺序存取。<a id="more"></a><br>线性表长度的定义是它所包含的元素的个数。<br>元素的类型决定了元素所占用存储空间的大小，但元素的个数不等价于元素的类型。<br>s=p-&gt;next：用S来替换指针；<br>p-&gt;next=s：p的后继结点是S；<br><img src="https://s2.ax1x.com/2019/09/08/nGW5m4.png" alt="nGW5m4.png" border="0"></p><h3 id="顺序存储结构"><a href="#顺序存储结构" class="headerlink" title="顺序存储结构"></a>顺序存储结构</h3><p>缺点：插入删除需要移动大量元素.</p><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><ol><li>插入算法的思路：<br>如果插入位置不合理，抛出异常；<br>如果线性表长度大于等于数组长度，则抛出异常或动态增加容量；<br>从最后一个元素开始向前遍历到第i个位置，分别将它们都向后移动一个位置；<br>将要插入元素填入位置i处； ?表长加1。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">/* 初始条件：顺序线性表L已存在，1≤i≤</span><br><span class="line">   ListLength(L)， */</span><br><span class="line">/* 操作结果：在L中第i个位置之前插入新的数据元</span><br><span class="line">   素e，L的长度加1 */</span><br><span class="line">Status ListInsert(SqList *L, int i, ElemType e)</span><br><span class="line">&#123;</span><br><span class="line">    int k;</span><br><span class="line">    /* 顺序线性表已经满 */</span><br><span class="line">    if (L-&gt;length == MAXSIZE)                       </span><br><span class="line">        return ERROR;</span><br><span class="line">    /* 当i不在范围内时 */</span><br><span class="line">    if (i &lt; 1 || i &gt;L-&gt;length + 1) </span><br><span class="line">            return ERROR;</span><br><span class="line">    /* 若插入数据位置不在表尾 */</span><br><span class="line">    if (i &lt;= L-&gt;length)                             </span><br><span class="line">    &#123;</span><br><span class="line">        /*将要插入位置后数据元素向后移动一位 */</span><br><span class="line">        for (k = L-&gt;length - 1; k &gt;= i - 1; k--)    /*从后面开始遍历过来然后替换位置*/</span><br><span class="line">            L-&gt;data[k + 1] = L-&gt;data[k];/*位置+1*/</span><br><span class="line">    &#125;</span><br><span class="line">    /* 将新元素插入 */</span><br><span class="line">    L-&gt;data[i - 1] = e;                             </span><br><span class="line">    L-&gt;length++;</span><br><span class="line">    return OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>2.删除<br>删除算法的思路：<br>如果删除位置不合理，抛出异常；<br>取出删除元素；<br>从删除元素位置开始遍历到最后一个元素位置，分别将它们都向前移动一个位置；<br>表长减1。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">/* 初始条件：顺序线性表L已存在，1≤i≤</span><br><span class="line">   ListLength(L) */</span><br><span class="line">/* 操作结果：删除L的第i个数据元素，并用e返回</span><br><span class="line">   其值，L的长度减1 */</span><br><span class="line">Status ListDelete(SqList *L, int i, ElemType *e)</span><br><span class="line">&#123;</span><br><span class="line">    int k;</span><br><span class="line">    /* 线性表为空 */</span><br><span class="line">    if (L-&gt;length == 0)                    </span><br><span class="line">           return ERROR;</span><br><span class="line">    /* 删除位置不正确 */</span><br><span class="line">    if (i &lt; 1 || i &gt; L-&gt;length)            </span><br><span class="line">        return ERROR;</span><br><span class="line">    *e = L-&gt;data[i - 1];</span><br><span class="line">    /* 如果删除不是最后位置 */</span><br><span class="line">    if (i &lt; L-&gt;length)                     </span><br><span class="line">    &#123;</span><br><span class="line">        /* 将删除位置后继元素前移 */</span><br><span class="line">        for (k = i; k &lt; L-&gt;length; k++)    </span><br><span class="line">            L-&gt;data[k - 1] = L-&gt;data[k];</span><br><span class="line">    &#125;</span><br><span class="line">    L-&gt;length--;</span><br><span class="line">    return OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="习题"><a href="#习题" class="headerlink" title="习题"></a>习题</h4><p>1.NumberList是一个顺序容器，以下代码执行后，NumberList里的元素依次为：<br>List<int> NumberList = new List<int>(){2,4,1,3,5};<br>for(int i = 0;i&lt;NumberList.Count;++i)<br>{<br>     int v = NumberList[i];<br>     if(v%2 = = 0)<br>     {<br>         NumberList.Remove(v);//删除的是元素，而非下标<br>     }<br>}<br>解：剩下的是{4,1,3,5}，第一次循环扫描的是i=0位置的元素（2），因为删除了所有的元素向前移动一位所以4就变成了i=0，第二次扫描的是i=1的位置，已经变成了1，以此类推，剩下的就是{4,1,3,5}</int></int></p><img src="https://s2.ax1x.com/2019/09/08/nGRjds.jpg" alt="nGRjds.jpg" border="0"><h3 id="链式存储结构"><a href="#链式存储结构" class="headerlink" title="链式存储结构"></a>链式存储结构</h3><p>链式结构中，除了要存数据元素信息外，还要存储它的后继元素的存储地址。<br><img src="https://s2.ax1x.com/2019/09/08/nGf09x.png" alt="nGf09x.png" border="0"><br>数据域和指针域形成结点(NODE)<br>链表中第一个结点的存储位置叫做头指针，那么整个链表的存取就必须是从头指针开始进行了。之后的每一个结点，其实就是上一个的后继指针指向的位置。线性链表的最后一个结点指针为“空”（通常用NULL或“^”符号表示）</p><h4 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h4><img src="https://s2.ax1x.com/2019/09/08/nGfW4I.png" alt="nGfW4I.png" border="0">1.链式存储结构的基本形式假设p是指向线性表第i个元素的指针，则该结点ai的数据域我们可以用p->data来表示，p->data的值是一个数据元素，结点ai的指针域可以用p->next来表示，p->next的值是一个指针。p->next指向谁呢？当然是指向第i+1个元素，即指向ai+1的指针。<img src="https://s2.ax1x.com/2019/09/08/nGfv80.png" alt="nGfv80.png" border="0"><h4 id="单链表"><a href="#单链表" class="headerlink" title="单链表"></a>单链表</h4><p>存储密度:结点数据本身所占的存储量和整个结点结构所占的存储量之比，而单链表的NODE由date和next组成所以 他的存储密度是&lt;1的。<br>优势在于只要简单的复制移动指针，而顺序存储结构每一次插入都系要移动n-i个结点.<br><img src="https://s2.ax1x.com/2019/09/09/nGq9rq.png" alt="nGq9rq.png" border="0"></p><h5 id="概念-2"><a href="#概念-2" class="headerlink" title="概念"></a>概念</h5><h5 id="读取第I个元素"><a href="#读取第I个元素" class="headerlink" title="读取第I个元素"></a>读取第I个元素</h5><p>从头开始找，直到第i个结点为止。由于这个算法的时间复杂度取决于i的位置，当i=1时，则不需遍历，第一个就取出数据了，而当i=n时则遍历n-1次才可以。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">/* 初始条件：顺序线性表L已存在，1≤i≤</span><br><span class="line">   ListLength(L) */</span><br><span class="line">/* 操作结果：用e返回L中第i个数据元素的值 */</span><br><span class="line">Status GetElem(LinkList L, int i, ElemType *e)</span><br><span class="line">&#123;</span><br><span class="line">    int j;</span><br><span class="line">    LinkList p;            /* 声明一指针p */</span><br><span class="line">    p = L-&gt;next;        /* 让p指向链表L的第个结点 */</span><br><span class="line">    j = 1;                 /* j为计数器 */</span><br><span class="line">    /* p不为空且计数器j还没有等于i时，循环继续 */</span><br><span class="line">    while (p &amp;&amp; j &lt; i)    </span><br><span class="line">    &#123;</span><br><span class="line">        p = p-&gt;next;    /* 让p指向下一个结点 */</span><br><span class="line">        ++j;</span><br><span class="line">    &#125;</span><br><span class="line">    if (!p || j &gt; i)</span><br><span class="line">        return ERROR;      /* 第i个结点不存在 */</span><br><span class="line">    *e = p-&gt;data;       /* 取第i个结点的数据 */</span><br><span class="line">    return OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h5><img src="https://s2.ax1x.com/2019/09/08/nGHghQ.png" alt="nGHghQ.png" border="0"><img src="https://s2.ax1x.com/2019/09/08/nGHRpj.png" alt="nGHRpj.png" border="0"><p>s-&gt;next = p-&gt;next; p-&gt;next = s;<br>p的后继结点改成s的后继结点，再把结点s变成p的后继结点</p><h5 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h5><img src="https://s2.ax1x.com/2019/09/08/nGb6Dx.png" alt="nGb6Dx.png" border="0"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">/* 初始条件：顺序线性表L已存在，1≤i≤</span><br><span class="line">   ListLength(L) */</span><br><span class="line">1./* 操作结果：删除L的第i个结点，并用e返回其</span><br><span class="line">2.   值，L的长度减1 */</span><br><span class="line">3.Status ListDelete(LinkList *L, int i, ElemType *e)</span><br><span class="line">4.&#123;</span><br><span class="line">5.    int j;</span><br><span class="line">6.    LinkList p, q;</span><br><span class="line">7.    p = *L;</span><br><span class="line">8.    j = 1;</span><br><span class="line">9.    /* 遍历寻找第i-1个结点 */</span><br><span class="line">10.    while (p-&gt;next &amp;&amp; j &lt; i)    </span><br><span class="line">11.    &#123;</span><br><span class="line">12.        p = p-&gt;next;</span><br><span class="line">13.        ++j;</span><br><span class="line">14.    &#125;</span><br><span class="line">15.    /* 第i个结点不存在 */</span><br><span class="line">16.    if (!(p-&gt;next) || j &gt; i)</span><br><span class="line">17.        return ERROR;           </span><br><span class="line">18.    q = p-&gt;next;</span><br><span class="line">19.    /* 将q的后继赋值给p的后继 */</span><br><span class="line">20.    p-&gt;next = q-&gt;next;          </span><br><span class="line">21.    /* 将q结点中的数据给e */</span><br><span class="line">22.    *e = q-&gt;data;               </span><br><span class="line">23.    /* 让系统回收此结点，释放内存 */</span><br><span class="line">24.    free(q);                    </span><br><span class="line">25.    return OK;</span><br><span class="line">26.&#125;</span><br></pre></td></tr></table></figure><h5 id="尾插法，头插法"><a href="#尾插法，头插法" class="headerlink" title="尾插法，头插法"></a>尾插法，头插法</h5><img src="https://s2.ax1x.com/2019/09/08/nGbIxA.png" alt="nGbIxA.png" border="0"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">/* 随机产生n个元素的值，建立带表头结点的单链</span><br><span class="line">线性表L（尾插法） */</span><br><span class="line">void CreateListTail(LinkList *L, int n)</span><br><span class="line">&#123;</span><br><span class="line">    LinkList p,r;</span><br><span class="line">    int i;</span><br><span class="line">    /* 初始化随机数种子 */</span><br><span class="line">    srand(time(0));                         </span><br><span class="line">    /* 为整个线性表 */</span><br><span class="line">    *L = (LinkList)malloc(sizeof(Node));    </span><br><span class="line">    /* r为指向尾部的结点 */</span><br><span class="line">    r = *L;                                 </span><br><span class="line">    for (i = 0; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        /* 生成新结点 */</span><br><span class="line">        p = (Node *)malloc(sizeof(Node));   </span><br><span class="line">        /* 随机生成100以内的数字 */</span><br><span class="line">        p-&gt;data = rand() % 100 + 1;         </span><br><span class="line">        /* 将表尾终端结点的指针指向新结点 */</span><br><span class="line">        r-&gt;next = p;                        </span><br><span class="line">        /* 将当前的新结点定义为表尾终端结点 */</span><br><span class="line">        r = p;                    /*因为这个时候不是最后一个了让r继续变成最后一个*/          </span><br><span class="line">    &#125;</span><br><span class="line">    /* 表示当前链表结束 */</span><br><span class="line">    r-&gt;next = NULL;                         </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://s2.ax1x.com/2019/09/08/nGbLa8.png" alt="nGbLa8.png" border="0"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">/* 随机产生n个元素的值，建立带表头结点的单链</span><br><span class="line">   线性表L（头插法） */</span><br><span class="line">void CreateListHead(LinkList *L, int n)</span><br><span class="line">&#123;</span><br><span class="line">    LinkList p;</span><br><span class="line">    int i;</span><br><span class="line">    /* 初始化随机数种子 */</span><br><span class="line">    srand(time(0));                            </span><br><span class="line">    *L = (LinkList)malloc(sizeof(Node));</span><br><span class="line">    /* 先建立一个带头结点的单链表 */</span><br><span class="line">    (*L)-&gt;next = NULL;                         </span><br><span class="line">    for (i = 0; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        /* 生成新结点 */</span><br><span class="line">        p = (LinkList)malloc(sizeof(Node));    </span><br><span class="line">        /* 随机生成100以内的数字 */</span><br><span class="line">        p-&gt;data = rand() % 100 + 1;            </span><br><span class="line">        p-&gt;next = (*L)-&gt;next;</span><br><span class="line">        /* 插入到表头 */</span><br><span class="line">        (*L)-&gt;next = p;                        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>#####单链表的整表删除</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">/* 初始条件：顺序线性表L已存在，操作结果：将L</span><br><span class="line">   重置为空表 */</span><br><span class="line">Status ClearList(LinkList *L)</span><br><span class="line">&#123;</span><br><span class="line">    LinkList p, q;</span><br><span class="line">    /* p指向第一个结点 */</span><br><span class="line">    p = (*L)-&gt;next;       </span><br><span class="line">    /* 没到表尾 */</span><br><span class="line">    while (p)             </span><br><span class="line">    &#123;</span><br><span class="line">        q = p-&gt;next;</span><br><span class="line">        free(p);</span><br><span class="line">        p=q;</span><br><span class="line">    &#125;</span><br><span class="line">    /* 头结点指针域为空 */</span><br><span class="line">    (*L)-&gt;next = NULL;    </span><br><span class="line">    return OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h5><ol><li>在一个长度为n的单链表的第i（0&lt;=i&lt;n）个元素后面插入一个元素时，需要向后移动（　0  ）个元素。#神坑  单链表不需要移动元素！！！</li></ol><h4 id="静态链表"><a href="#静态链表" class="headerlink" title="静态链表"></a>静态链表</h4><!--more-->]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;线性表&quot;&gt;&lt;a href=&quot;#线性表&quot; class=&quot;headerlink&quot; title=&quot;线性表&quot;&gt;&lt;/a&gt;线性表&lt;/h2&gt;&lt;p&gt;线性表的顺序存储结构和线性表的链式存储结构分别是随机存取和顺序存取。
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>111</title>
    <link href="http://yoursite.com/2019/09/07/hello-world/"/>
    <id>http://yoursite.com/2019/09/07/hello-world/</id>
    <published>2019-09-07T11:39:44.326Z</published>
    <updated>2019-09-09T12:29:53.938Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://www.baidu.com" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><a id="more"></a><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://www.baidu.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Quick-Start&quot;&gt;&lt;a href=&quot;#Quick-Start&quot; class=&quot;headerlink&quot; title=&quot;Quick Start&quot;&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;
    
    </summary>
    
    
    
  </entry>
  
</feed>
